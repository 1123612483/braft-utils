{"version":3,"sources":["../src/content.js"],"names":["isEditorState","editorState","EditorState","createEmptyEditorState","editorDecorators","createEmpty","createEditorState","contentState","createWithContent","isSelectionCollapsed","getSelection","isCollapsed","selectBlock","block","blockKey","getKey","forceSelection","SelectionState","anchorKey","anchorOffset","focusKey","focusOffset","getLength","selectNextBlock","nextBlock","getCurrentContent","getBlockAfter","removeBlock","lastSelection","nextContentState","nextEditorState","Modifier","removeRange","setBlockType","getSelectionAfter","push","getSelectionBlock","getBlockForKey","getAnchorKey","setSelectionBlockData","blockData","override","newBlockData","Object","assign","getSelectionBlockData","toJS","keys","forEach","hasOwnProperty","key","undefined","name","getData","get","getSelectionBlockType","getType","getSelectionText","selectionState","currentContentBlock","start","getStartOffset","end","getEndOffset","getText","slice","toggleSelectionBlockType","blockType","RichUtils","toggleBlockType","getSelectionEntityType","entityKey","entity","getEntity","getSelectionEntityData","type","toggleSelectionEntity","applyEntity","createEntity","mutability","data","getLastCreatedEntityKey","set","currentContent","error","console","warn","toggleSelectionLink","href","target","entityData","toggleLink","merge","insertText","getSelectionInlineStyle","getCurrentInlineStyle","selectionHasInlineStyle","style","has","toUpperCase","toggleSelectionInlineStyle","stylesToBeRemoved","filter","item","length","reduce","removeInlineStyle","toggleInlineStyle","removeSelectionInlineStyles","toggleSelectionAlignment","alignment","textAlign","toggleSelectionIndent","textIndent","maxIndent","isNaN","increaseSelectionIndent","currentIndent","decreaseSelectionIndent","toggleSelectionColor","color","colorList","replace","map","toggleSelectionBackgroundColor","toggleSelectionFontSize","fontSize","fontSizeList","toggleSelectionLineHeight","lineHeight","lineHeightList","toggleSelectionFontFamily","fontFamily","fontFamilyList","toggleSelectionLetterSpacing","letterSpacing","letterSpacingList","text","inlineStyle","currentSelectedBlockType","replaceText","insertHTML","htmlString","source","options","convertOptions","blockMap","replaceWithFragment","insertAtomicBlock","immutable","contentStateWithEntity","newEditorState","AtomicBlockUtils","insertHorizontalLine","insertMedias","medias","media","url","meta","setMediaData","mergeEntityData","removeMedia","mediaBlock","setMediaPosition","position","newPosition","float","clear","firstBlock","getFirstBlock","lastBlock","getLastBlock","allSelected","hasFocus","handleKeyCommand","command","handleNewLine","event","undo","redo"],"mappings":";;;;;;AAAA;;AACA;;AACA;;kBAEe;AAEbA,eAFa,yBAEEC,WAFF,EAEe;AAC1B,WAAOA,uBAAuBC,oBAA9B;AACD,GAJY;AAMbC,wBANa,kCAMWC,gBANX,EAM6B;AACxC,WAAOF,qBAAYG,WAAZ,CAAwBD,gBAAxB,CAAP;AACD,GARY;AAUbE,mBAVa,6BAUMC,YAVN,EAUoBH,gBAVpB,EAUsC;AACjD,WAAOF,qBAAYM,iBAAZ,CAA8BD,YAA9B,EAA4CH,gBAA5C,CAAP;AACD,GAZY;AAcbK,sBAda,gCAcSR,WAdT,EAcsB;AACjC,WAAOA,YAAYS,YAAZ,GAA2BC,WAA3B,EAAP;AACD,GAhBY;AAkBbC,aAlBa,uBAkBAX,WAlBA,EAkBaY,KAlBb,EAkBoB;;AAE/B,QAAMC,WAAWD,MAAME,MAAN,EAAjB;;AAEA,WAAOb,qBAAYc,cAAZ,CAA2Bf,WAA3B,EAAwC,IAAIgB,uBAAJ,CAAmB;AAChEC,iBAAWJ,QADqD;AAEhEK,oBAAc,CAFkD;AAGhEC,gBAAUN,QAHsD;AAIhEO,mBAAaR,MAAMS,SAAN;AAJmD,KAAnB,CAAxC,CAAP;AAOD,GA7BY;AA+BbC,iBA/Ba,2BA+BItB,WA/BJ,EA+BiBY,KA/BjB,EA+BwB;AACnC,QAAMW,YAAYvB,YAAYwB,iBAAZ,GAAgCC,aAAhC,CAA8Cb,MAAME,MAAN,EAA9C,CAAlB;AACA,WAAOS,YAAY,KAAKZ,WAAL,CAAiBX,WAAjB,EAA8BuB,SAA9B,CAAZ,GAAuDvB,WAA9D;AACD,GAlCY;AAoCb0B,aApCa,uBAoCA1B,WApCA,EAoCaY,KApCb,EAoC0C;AAAA,QAAtBe,aAAsB,uEAAN,IAAM;;;AAErD,QAAIC,yBAAJ;AAAA,QAAsBC,wBAAtB;AACA,QAAMhB,WAAWD,MAAME,MAAN,EAAjB;;AAEAc,uBAAmBE,kBAASC,WAAT,CAAqB/B,YAAYwB,iBAAZ,EAArB,EAAsD,IAAIR,uBAAJ,CAAmB;AAC1FC,iBAAWJ,QAD+E;AAE1FK,oBAAc,CAF4E;AAG1FC,gBAAUN,QAHgF;AAI1FO,mBAAaR,MAAMS,SAAN;AAJ6E,KAAnB,CAAtD,EAKf,UALe,CAAnB;;AAOAO,uBAAmBE,kBAASE,YAAT,CAAsBJ,gBAAtB,EAAwCA,iBAAiBK,iBAAjB,EAAxC,EAA8E,UAA9E,CAAnB;AACAJ,sBAAkB5B,qBAAYiC,IAAZ,CAAiBlC,WAAjB,EAA8B4B,gBAA9B,EAAgD,cAAhD,CAAlB;AACA,WAAO3B,qBAAYc,cAAZ,CAA2Bc,eAA3B,EAA4CF,iBAAiBC,iBAAiBK,iBAAjB,EAA7D,CAAP;AAED,GApDY;AAsDbE,mBAtDa,6BAsDMnC,WAtDN,EAsDmB;AAC9B,WAAOA,YAAYwB,iBAAZ,GAAgCY,cAAhC,CAA+CpC,YAAYS,YAAZ,GAA2B4B,YAA3B,EAA/C,CAAP;AACD,GAxDY;AA0DbC,uBA1Da,iCA0DUtC,WA1DV,EA0DuBuC,SA1DvB,EA0DkCC,QA1DlC,EA0D4C;;AAEvD,QAAIC,eAAeD,WAAWD,SAAX,GAAuBG,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKC,qBAAL,CAA2B5C,WAA3B,EAAwC6C,IAAxC,EAAlB,EAAkEN,SAAlE,CAA1C;;AAEAG,WAAOI,IAAP,CAAYL,YAAZ,EAA0BM,OAA1B,CAAkC,eAAO;AACvC,UAAIN,aAAaO,cAAb,CAA4BC,GAA5B,KAAoCR,aAAaQ,GAAb,MAAsBC,SAA9D,EAAyE;AACvE,eAAOT,aAAaQ,GAAb,CAAP;AACD;AACF,KAJD;;AAMA,WAAO,gCAAajD,WAAb,EAA0ByC,YAA1B,CAAP;AAED,GAtEY;AAwEbG,uBAxEa,iCAwEU5C,WAxEV,EAwEuBmD,IAxEvB,EAwE6B;AACxC,QAAMZ,YAAY,KAAKJ,iBAAL,CAAuBnC,WAAvB,EAAoCoD,OAApC,EAAlB;AACA,WAAOD,OAAOZ,UAAUc,GAAV,CAAcF,IAAd,CAAP,GAA6BZ,SAApC;AACD,GA3EY;AA6Ebe,uBA7Ea,iCA6EUtD,WA7EV,EA6EuB;AAClC,WAAO,KAAKmC,iBAAL,CAAuBnC,WAAvB,EAAoCuD,OAApC,EAAP;AACD,GA/EY;AAiFbC,kBAjFa,4BAiFKxD,WAjFL,EAiFkB;;AAE7B,QAAMyD,iBAAiBzD,YAAYS,YAAZ,EAAvB;AACA,QAAMH,eAAeN,YAAYwB,iBAAZ,EAArB;;AAEA,QAAIiC,eAAe/C,WAAf,MAAgC,KAAK4C,qBAAL,CAA2BtD,WAA3B,MAA4C,QAAhF,EAA0F;AACxF,aAAO,EAAP;AACD;;AAED,QAAMiB,YAAYwC,eAAepB,YAAf,EAAlB;AACA,QAAMqB,sBAAsBpD,aAAa8B,cAAb,CAA4BnB,SAA5B,CAA5B;AACA,QAAM0C,QAAQF,eAAeG,cAAf,EAAd;AACA,QAAMC,MAAMJ,eAAeK,YAAf,EAAZ;;AAEA,WAAOJ,oBAAoBK,OAApB,GAA8BC,KAA9B,CAAoCL,KAApC,EAA2CE,GAA3C,CAAP;AAED,GAjGY;AAmGbI,0BAnGa,oCAmGajE,WAnGb,EAmG0BkE,SAnG1B,EAmGqC;AAChD,WAAOC,mBAAUC,eAAV,CAA0BpE,WAA1B,EAAuCkE,SAAvC,CAAP;AACD,GArGY;AAuGbG,wBAvGa,kCAuGWrE,WAvGX,EAuGwB;;AAEnC,QAAMsE,YAAY,sCAAmBtE,WAAnB,CAAlB;;AAEA,QAAIsE,SAAJ,EAAe;AACb,UAAMC,SAASvE,YAAYwB,iBAAZ,GAAgCgD,SAAhC,CAA0CF,SAA1C,CAAf;AACA,aAAOC,SAASA,OAAOlB,GAAP,CAAW,MAAX,CAAT,GAA8B,IAArC;AACD;;AAED,WAAO,IAAP;AAED,GAlHY;AAoHboB,wBApHa,kCAoHWzE,WApHX,EAoHwB0E,IApHxB,EAoH8B;;AAEzC,QAAMJ,YAAY,sCAAmBtE,WAAnB,CAAlB;;AAEA,QAAIsE,SAAJ,EAAe;AACb,UAAMC,SAASvE,YAAYwB,iBAAZ,GAAgCgD,SAAhC,CAA0CF,SAA1C,CAAf;AACA,UAAIC,UAAUA,OAAOlB,GAAP,CAAW,MAAX,MAAuBqB,IAArC,EAA2C;AACzC,eAAOH,OAAOnB,OAAP,EAAP;AACD,OAFD,MAEO;AACL,eAAO,EAAP;AACD;AACF,KAPD,MAOO;AACL,aAAO,EAAP;AACD;AAEF,GAnIY;AAqIbuB,uBArIa,iCAqIU3E,WArIV,EAqIuBuE,MArIvB,EAqI+B;;AAE1C,QAAMjE,eAAeN,YAAYwB,iBAAZ,EAArB;AACA,QAAMiC,iBAAiBzD,YAAYS,YAAZ,EAAvB;;AAEA,QAAIgD,eAAe/C,WAAf,MAAgC,KAAK4C,qBAAL,CAA2BtD,WAA3B,MAA4C,QAAhF,EAA0F;AACxF,aAAOA,WAAP;AACD;;AAED,QAAI,CAACuE,MAAD,IAAW,CAACA,OAAOG,IAAnB,IAA2B,KAAKL,sBAAL,CAA4BrE,WAA5B,MAA6CuE,OAAOG,IAAnF,EAAyF;AACvF,aAAOzE,qBAAYiC,IAAZ,CAAiBlC,WAAjB,EAA8B8B,kBAAS8C,WAAT,CAAqBtE,YAArB,EAAmCmD,cAAnC,EAAmD,IAAnD,CAA9B,EAAwF,cAAxF,CAAP;AACD;;AAED,QAAI;;AAEF,UAAM7B,mBAAmBtB,aAAauE,YAAb,CAA0BN,OAAOG,IAAjC,EAAuCH,OAAOO,UAA9C,EAA0DP,OAAOQ,IAAjE,CAAzB;AACA,UAAMT,YAAY1C,iBAAiBoD,uBAAjB,EAAlB;;AAEA,UAAInD,kBAAkB5B,qBAAYgF,GAAZ,CAAgBjF,WAAhB,EAA6B;AACjDkF,wBAAgBtD;AADiC,OAA7B,CAAtB;;AAIA,aAAO3B,qBAAYiC,IAAZ,CAAiBL,eAAjB,EAAkCC,kBAAS8C,WAAT,CAAqBhD,gBAArB,EAAuC6B,cAAvC,EAAuDa,SAAvD,CAAlC,EAAqG,cAArG,CAAP;AAED,KAXD,CAWE,OAAOa,KAAP,EAAc;AACdC,cAAQC,IAAR,CAAaF,KAAb;AACA,aAAOnF,WAAP;AACD;AAEF,GAlKY;AAoKbsF,qBApKa,+BAoKQtF,WApKR,EAoKqBuF,IApKrB,EAoK2BC,MApK3B,EAoKmC;;AAE9C,QAAMlF,eAAeN,YAAYwB,iBAAZ,EAArB;AACA,QAAMiC,iBAAiBzD,YAAYS,YAAZ,EAAvB;;AAEA,QAAIgF,aAAa,EAAEF,UAAF,EAAQC,cAAR,EAAjB;;AAEA,QAAI/B,eAAe/C,WAAf,MAAgC,KAAK4C,qBAAL,CAA2BtD,WAA3B,MAA4C,QAAhF,EAA0F;AACxF,aAAOA,WAAP;AACD;;AAED,QAAIuF,SAAS,KAAb,EAAoB;AAClB,aAAOpB,mBAAUuB,UAAV,CAAqB1F,WAArB,EAAkCyD,cAAlC,EAAkD,IAAlD,CAAP;AACD;;AAED,QAAI8B,SAAS,IAAb,EAAmB;AACjB,aAAOE,WAAWF,IAAlB;AACD;;AAED,QAAI;;AAEF,UAAM3D,mBAAmBtB,aAAauE,YAAb,CAA0B,MAA1B,EAAkC,SAAlC,EAA6CY,UAA7C,CAAzB;AACA,UAAMnB,YAAY1C,iBAAiBoD,uBAAjB,EAAlB;;AAEA,UAAInD,kBAAkB5B,qBAAYgF,GAAZ,CAAgBjF,WAAhB,EAA6B;AACjDkF,wBAAgBtD;AADiC,OAA7B,CAAtB;;AAIAC,wBAAkBsC,mBAAUuB,UAAV,CAAqB7D,eAArB,EAAsC4B,cAAtC,EAAsDa,SAAtD,CAAlB;AACAzC,wBAAkB5B,qBAAYc,cAAZ,CAA2Bc,eAA3B,EAA4C4B,eAAekC,KAAf,CAAqB;AACjFzE,sBAAcuC,eAAeK,YAAf,EADmE;AAEjF1C,qBAAaqC,eAAeK,YAAf;AAFoE,OAArB,CAA5C,CAAlB;;AAKAjC,wBAAkB5B,qBAAYiC,IAAZ,CAAiBL,eAAjB,EAAkCC,kBAAS8D,UAAT,CAClD/D,gBAAgBL,iBAAhB,EADkD,EACbK,gBAAgBpB,YAAhB,EADa,EACmB,GADnB,CAAlC,EAEf,aAFe,CAAlB;;AAIA,aAAOoB,eAAP;AAED,KArBD,CAqBE,OAAOsD,KAAP,EAAc;AACdC,cAAQC,IAAR,CAAaF,KAAb;AACA,aAAOnF,WAAP;AACD;AAEF,GAjNY;AAmNb6F,yBAnNa,mCAmNY7F,WAnNZ,EAmNyB;AACpC,WAAOA,YAAY8F,qBAAZ,EAAP;AACD,GArNY;AAuNbC,yBAvNa,mCAuNY/F,WAvNZ,EAuNyBgG,KAvNzB,EAuNgC;AAC3C,WAAO,KAAKH,uBAAL,CAA6B7F,WAA7B,EAA0CiG,GAA1C,CAA8CD,MAAME,WAAN,EAA9C,CAAP;AACD,GAzNY;AA2NbC,4BA3Na,sCA2NenG,WA3Nf,EA2N4BgG,KA3N5B,EA2N2D;AAAA,QAAxBI,iBAAwB,uEAAJ,EAAI;;;AAEtE,QAAM3C,iBAAiBzD,YAAYS,YAAZ,EAAvB;AACA,QAAMH,eAAeN,YAAYwB,iBAAZ,EAArB;;AAEAwE,YAAQA,MAAME,WAAN,EAAR;AACAE,wBAAoBA,kBAAkBC,MAAlB,CAAyB;AAAA,aAAQC,SAASN,KAAjB;AAAA,KAAzB,CAApB;;AAEA,QAAMpE,mBAAmBwE,kBAAkBG,MAAlB,GAA2BH,kBAAkBI,MAAlB,CAAyB,UAAClG,YAAD,EAAegG,IAAf,EAAwB;AACnG,aAAOxE,kBAAS2E,iBAAT,CAA2BnG,YAA3B,EAAyCmD,cAAzC,EAAyD6C,IAAzD,CAAP;AACD,KAFmD,EAEjDhG,YAFiD,CAA3B,GAENA,YAFnB;;AAIA,QAAMuB,kBAAkBuE,kBAAkBG,MAAlB,GAA2BtG,qBAAYiC,IAAZ,CAAiBlC,WAAjB,EAA8B4B,gBAA9B,EAAgD,qBAAhD,CAA3B,GAAoG5B,WAA5H;AACA,WAAOmE,mBAAUuC,iBAAV,CAA4B7E,eAA5B,EAA6CmE,KAA7C,CAAP;AAED,GA1OY;AA4ObW,6BA5Oa,uCA4OgB3G,WA5OhB,EA4O6B;AACxC,WAAO,yCAAsBA,WAAtB,CAAP;AACD,GA9OY;AAgPb4G,0BAhPa,oCAgPa5G,WAhPb,EAgP0B6G,SAhP1B,EAgPqC;AAChD,WAAO,KAAKvE,qBAAL,CAA2BtC,WAA3B,EAAwC;AAC7C8G,iBAAW,KAAKlE,qBAAL,CAA2B5C,WAA3B,EAAwC,WAAxC,MAAyD6G,SAAzD,GAAqEA,SAArE,GAAiF3D;AAD/C,KAAxC,CAAP;AAGD,GApPY;AAsPb6D,uBAtPa,iCAsPU/G,WAtPV,EAsPuBgH,UAtPvB,EAsPkD;AAAA,QAAfC,SAAe,uEAAH,CAAG;;AAC7D,WAAOD,aAAa,CAAb,IAAkBA,aAAaC,SAA/B,IAA4CC,MAAMF,UAAN,CAA5C,GAAgEhH,WAAhE,GAA8E,KAAKsC,qBAAL,CAA2BtC,WAA3B,EAAwC;AAC3HgH,kBAAYA,cAAc9D;AADiG,KAAxC,CAArF;AAGD,GA1PY;AA4PbiE,yBA5Pa,mCA4PYnH,WA5PZ,EA4PwC;AAAA,QAAfiH,SAAe,uEAAH,CAAG;;AACnD,QAAMG,gBAAgB,KAAKxE,qBAAL,CAA2B5C,WAA3B,EAAwC,YAAxC,KAAyD,CAA/E;AACA,WAAO,KAAK+G,qBAAL,CAA2B/G,WAA3B,EAAwCoH,gBAAgB,CAAxD,EAA2DH,SAA3D,CAAP;AACD,GA/PY;AAiQbI,yBAjQa,mCAiQYrH,WAjQZ,EAiQyB;AACpC,QAAMoH,gBAAgB,KAAKxE,qBAAL,CAA2B5C,WAA3B,EAAwC,YAAxC,KAAyD,CAA/E;AACA,WAAO,KAAK+G,qBAAL,CAA2B/G,WAA3B,EAAwCoH,gBAAgB,CAAxD,CAAP;AACD,GApQY;AAsQbE,sBAtQa,gCAsQStH,WAtQT,EAsQsBuH,KAtQtB,EAsQ6C;AAAA,QAAhBC,SAAgB,uEAAJ,EAAI;;AACxD,WAAO,KAAKrB,0BAAL,CAAgCnG,WAAhC,EAA6C,WAAWuH,MAAME,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAxD,EAAgFD,UAAUE,GAAV,CAAc;AAAA,aAAQ,WAAWpB,KAAKmB,OAAL,CAAa,GAAb,EAAkB,EAAlB,EAAsBvB,WAAtB,EAAnB;AAAA,KAAd,CAAhF,CAAP;AACD,GAxQY;AA0QbyB,gCA1Qa,0CA0QmB3H,WA1QnB,EA0QgCuH,KA1QhC,EA0QuD;AAAA,QAAhBC,SAAgB,uEAAJ,EAAI;;AAClE,WAAO,KAAKrB,0BAAL,CAAgCnG,WAAhC,EAA6C,aAAauH,MAAME,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAA1D,EAAkFD,UAAUE,GAAV,CAAc;AAAA,aAAQ,aAAapB,KAAKmB,OAAL,CAAa,GAAb,EAAkB,EAAlB,EAAsBvB,WAAtB,EAArB;AAAA,KAAd,CAAlF,CAAP;AACD,GA5QY;AA8Qb0B,yBA9Qa,mCA8QY5H,WA9QZ,EA8QyB6H,QA9QzB,EA8QsD;AAAA,QAAnBC,YAAmB,uEAAJ,EAAI;;AACjE,WAAO,KAAK3B,0BAAL,CAAgCnG,WAAhC,EAA6C,cAAc6H,QAA3D,EAAqEC,aAAaJ,GAAb,CAAiB;AAAA,aAAQ,cAAcpB,IAAtB;AAAA,KAAjB,CAArE,CAAP;AACD,GAhRY;AAkRbyB,2BAlRa,qCAkRc/H,WAlRd,EAkR2BgI,UAlR3B,EAkR4D;AAAA,QAArBC,cAAqB,uEAAJ,EAAI;;AACvE,WAAO,KAAK9B,0BAAL,CAAgCnG,WAAhC,EAA6C,gBAAgBgI,UAA7D,EAAyEC,eAAeP,GAAf,CAAmB;AAAA,aAAQ,gBAAgBpB,IAAxB;AAAA,KAAnB,CAAzE,CAAP;AACD,GApRY;AAsRb4B,2BAtRa,qCAsRclI,WAtRd,EAsR2BmI,UAtR3B,EAsR4D;AAAA,QAArBC,cAAqB,uEAAJ,EAAI;;AACvE,WAAO,KAAKjC,0BAAL,CAAgCnG,WAAhC,EAA6C,gBAAgBmI,UAA7D,EAAyEC,eAAeV,GAAf,CAAmB;AAAA,aAAQ,gBAAgBpB,KAAKnD,IAAL,CAAU+C,WAAV,EAAxB;AAAA,KAAnB,CAAzE,CAAP;AACD,GAxRY;AA0RbmC,8BA1Ra,wCA0RiBrI,WA1RjB,EA0R8BsI,aA1R9B,EA0RqE;AAAA,QAAxBC,iBAAwB,uEAAJ,EAAI;;AAChF,WAAO,KAAKpC,0BAAL,CAAgCnG,WAAhC,EAA6C,mBAAmBsI,aAAhE,EAA+EC,kBAAkBb,GAAlB,CAAsB;AAAA,aAAQ,mBAAmBpB,IAA3B;AAAA,KAAtB,CAA/E,CAAP;AACD,GA5RY;AA8RbV,YA9Ra,sBA8RD5F,WA9RC,EA8RYwI,IA9RZ,EA8RkBC,WA9RlB,EA8R+BlE,MA9R/B,EA8RuC;;AAElD,QAAMd,iBAAiBzD,YAAYS,YAAZ,EAAvB;AACA,QAAMiI,2BAA2B,KAAKpF,qBAAL,CAA2BtD,WAA3B,CAAjC;;AAEA,QAAI0I,6BAA6B,QAAjC,EAA2C;AACzC,aAAO1I,WAAP;AACD;;AAED,QAAIsE,kBAAJ;AACA,QAAIhE,eAAeN,YAAYwB,iBAAZ,EAAnB;;AAEA,QAAI+C,UAAUA,OAAOG,IAArB,EAA2B;AACzBpE,qBAAeA,aAAauE,YAAb,CAA0BN,OAAOG,IAAjC,EAAuCH,OAAOO,UAAP,IAAqB,SAA5D,EAAuEP,OAAOQ,IAAP,IAAeU,UAAtF,CAAf;AACAnB,kBAAYhE,aAAa0E,uBAAb,EAAZ;AACD;;AAED,QAAI,CAACvB,eAAe/C,WAAf,EAAL,EAAmC;AACjC,aAAOT,qBAAYiC,IAAZ,CAAiBlC,WAAjB,EAA8B8B,kBAAS6G,WAAT,CAAqBrI,YAArB,EAAmCmD,cAAnC,EAAmD+E,IAAnD,EAAyDC,WAAzD,EAAsEnE,SAAtE,CAA9B,EAAgH,cAAhH,CAAP;AACD,KAFD,MAEO;AACL,aAAOrE,qBAAYiC,IAAZ,CAAiBlC,WAAjB,EAA8B8B,kBAAS8D,UAAT,CAAoBtF,YAApB,EAAkCmD,cAAlC,EAAkD+E,IAAlD,EAAwDC,WAAxD,EAAqEnE,SAArE,CAA9B,EAA+G,aAA/G,CAAP;AACD;AAEF,GArTY;AAuTbsE,YAvTa,sBAuTD5I,WAvTC,EAuTY6I,UAvTZ,EAuTwBC,MAvTxB,EAuTgC;;AAE3C,QAAI,CAACD,UAAL,EAAiB;AACf,aAAO7I,WAAP;AACD;;AAED,QAAMyD,iBAAiBzD,YAAYS,YAAZ,EAAvB;AACA,QAAMH,eAAeN,YAAYwB,iBAAZ,EAArB;AACA,QAAMuH,UAAU/I,YAAYgJ,cAAZ,IAA8B,EAA9C;;AAEA,QAAI;AAAA,4BAEmB,6BAAe,oCAAiBH,UAAjB,EAA6BE,OAA7B,EAAsCD,MAAtC,CAAf,CAFnB;AAAA,UAEMG,QAFN,mBAEMA,QAFN;;AAIF,aAAOhJ,qBAAYiC,IAAZ,CAAiBlC,WAAjB,EAA8B8B,kBAASoH,mBAAT,CACnC5I,YADmC,EACrBmD,cADqB,EACLwF,QADK,CAA9B,EAEJ,iBAFI,CAAP;AAID,KARD,CAQE,OAAO9D,KAAP,EAAc;AACdC,cAAQC,IAAR,CAAaF,KAAb;AACA,aAAOnF,WAAP;AACD;AAEF,GA9UY;AAgVbmJ,mBAhVa,6BAgVMnJ,WAhVN,EAgVmB0E,IAhVnB,EAgVsD;AAAA,QAA7B0E,SAA6B,uEAAjB,IAAiB;AAAA,QAAXrE,IAAW,uEAAJ,EAAI;;;AAEjE,QAAMtB,iBAAiBzD,YAAYS,YAAZ,EAAvB;AACA,QAAMH,eAAeN,YAAYwB,iBAAZ,EAArB;;AAEA,QAAI,CAACiC,eAAe/C,WAAf,EAAD,IAAiC,KAAK4C,qBAAL,CAA2BtD,WAA3B,MAA4C,QAAjF,EAA2F;AACzF,aAAOA,WAAP;AACD;;AAED,QAAMqJ,yBAAyB/I,aAAauE,YAAb,CAA0BH,IAA1B,EAAgC0E,YAAY,WAAZ,GAA0B,SAA1D,EAAqErE,IAArE,CAA/B;AACA,QAAMT,YAAY+E,uBAAuBrE,uBAAvB,EAAlB;AACA,QAAMsE,iBAAiBC,0BAAiBJ,iBAAjB,CAAmCnJ,WAAnC,EAAgDsE,SAAhD,EAA2D,GAA3D,CAAvB;;AAEA,WAAOgF,cAAP;AAED,GA/VY;AAiWbE,sBAjWa,gCAiWSxJ,WAjWT,EAiWsB;AACjC,WAAO,KAAKmJ,iBAAL,CAAuBnJ,WAAvB,EAAoC,IAApC,CAAP;AACD,GAnWY;AAqWbyJ,cArWa,wBAqWCzJ,WArWD,EAqW2B;AAAA,QAAb0J,MAAa,uEAAJ,EAAI;;;AAEtC,QAAI,CAACA,OAAOnD,MAAZ,EAAoB;AAClB,aAAOvG,WAAP;AACD;;AAED,QAAI,KAAKsD,qBAAL,CAA2BtD,WAA3B,MAA4C,QAAhD,EAA0D;AACxD,WAAKsB,eAAL,CAAqBtB,WAArB,EAAkC,KAAKmC,iBAAL,CAAuBnC,WAAvB,CAAlC;AACD;;AAED,WAAO0J,OAAOlD,MAAP,CAAc,UAACxG,WAAD,EAAc2J,KAAd,EAAwB;AAAA,UACnCC,GADmC,GACTD,KADS,CACnCC,GADmC;AAAA,UAC9BzG,IAD8B,GACTwG,KADS,CAC9BxG,IAD8B;AAAA,UACxBuB,IADwB,GACTiF,KADS,CACxBjF,IADwB;AAAA,UAClBmF,IADkB,GACTF,KADS,CAClBE,IADkB;;AAE3C,UAAMR,yBAAyBrJ,YAAYwB,iBAAZ,GAAgCqD,YAAhC,CAA6CH,IAA7C,EAAmD,WAAnD,EAAgE,EAAEkF,QAAF,EAAOzG,UAAP,EAAauB,UAAb,EAAmBmF,UAAnB,EAAhE,CAA/B;AACA,UAAMvF,YAAY+E,uBAAuBrE,uBAAvB,EAAlB;AACA,aAAOuE,0BAAiBJ,iBAAjB,CAAmCnJ,WAAnC,EAAgDsE,SAAhD,EAA2D,GAA3D,CAAP;AACD,KALM,EAKJtE,WALI,CAAP;AAOD,GAtXY;AAwXb8J,cAxXa,wBAwXC9J,WAxXD,EAwXcsE,SAxXd,EAwXyBS,IAxXzB,EAwX+B;AAC1C,WAAO9E,qBAAYiC,IAAZ,CAAiBlC,WAAjB,EAA8BA,YAAYwB,iBAAZ,GAAgCuI,eAAhC,CAAgDzF,SAAhD,EAA2DS,IAA3D,CAA9B,EAAgG,mBAAhG,CAAP;AACD,GA1XY;AA4XbiF,aA5Xa,uBA4XAhK,WA5XA,EA4XaiK,UA5Xb,EA4XyB;AACpC,WAAO,KAAKvI,WAAL,CAAiB1B,WAAjB,EAA8BiK,UAA9B,CAAP;AACD,GA9XY;AAgYbC,kBAhYa,4BAgYKlK,WAhYL,EAgYkBiK,UAhYlB,EAgY8BE,QAhY9B,EAgYwC;;AAEnD,QAAIC,cAAc,EAAlB;AAFmD,QAG3CC,KAH2C,GAGtBF,QAHsB,CAG3CE,KAH2C;AAAA,QAGpCxD,SAHoC,GAGtBsD,QAHsB,CAGpCtD,SAHoC;;;AAKnD,QAAI,OAAOwD,KAAP,KAAiB,WAArB,EAAkC;AAChCD,kBAAYC,KAAZ,GAAoBJ,WAAW7G,OAAX,GAAqBC,GAArB,CAAyB,OAAzB,MAAsCgH,KAAtC,GAA8C,IAA9C,GAAqDA,KAAzE;AACD;;AAED,QAAI,OAAOxD,SAAP,KAAqB,WAAzB,EAAsC;AACpCuD,kBAAYvD,SAAZ,GAAwBoD,WAAW7G,OAAX,GAAqBC,GAArB,CAAyB,WAAzB,MAA0CwD,SAA1C,GAAsD,IAAtD,GAA6DA,SAArF;AACD;;AAED,WAAO,KAAKvE,qBAAL,CAA2B,KAAK3B,WAAL,CAAiBX,WAAjB,EAA8BiK,UAA9B,CAA3B,EAAsEG,WAAtE,CAAP;AAED,GA/YY;AAiZbE,OAjZa,iBAiZNtK,WAjZM,EAiZO;;AAElB,QAAMM,eAAeN,YAAYwB,iBAAZ,EAArB;;AAEA,QAAM+I,aAAajK,aAAakK,aAAb,EAAnB;AACA,QAAMC,YAAYnK,aAAaoK,YAAb,EAAlB;;AAEA,QAAMC,cAAc,IAAI3J,uBAAJ,CAAmB;AACrCC,iBAAWsJ,WAAWzJ,MAAX,EAD0B;AAErCI,oBAAc,CAFuB;AAGrCC,gBAAUsJ,UAAU3J,MAAV,EAH2B;AAIrCM,mBAAaqJ,UAAUpJ,SAAV,EAJwB;AAKrCuJ,gBAAU;AAL2B,KAAnB,CAApB;;AAQA,WAAO3K,qBAAYiC,IAAZ,CACLlC,WADK,EAEL8B,kBAASC,WAAT,CAAqBzB,YAArB,EAAmCqK,WAAnC,EAAgD,UAAhD,CAFK,EAGL,cAHK,CAAP;AAMD,GAtaY;AAwabE,kBAxaa,4BAwaK7K,WAxaL,EAwakB8K,OAxalB,EAwa2B;AACtC,WAAO3G,mBAAU0G,gBAAV,CAA2B7K,WAA3B,EAAwC8K,OAAxC,CAAP;AACD,GA1aY;AA4abC,eA5aa,yBA4aE/K,WA5aF,EA4aegL,KA5af,EA4asB;AACjC,WAAO,iCAAchL,WAAd,EAA2BgL,KAA3B,CAAP;AACD,GA9aY;AAgbbC,MAhba,gBAgbPjL,WAhbO,EAgbM;AACjB,WAAOC,qBAAYgL,IAAZ,CAAiBjL,WAAjB,CAAP;AACD,GAlbY;AAobbkL,MApba,gBAobPlL,WApbO,EAobM;AACjB,WAAOC,qBAAYiL,IAAZ,CAAiBlL,WAAjB,CAAP;AACD;AAtbY,C","file":"content.js","sourcesContent":["import { Modifier, EditorState, SelectionState, RichUtils, AtomicBlockUtils, convertFromRaw } from 'draft-js'\nimport { setBlockData, getSelectionEntity, removeAllInlineStyles, handleNewLine } from 'draftjs-utils'\nimport { convertHTMLToRaw } from 'braft-convert'\n\nexport default {\n\n  isEditorState (editorState) {\n    return editorState instanceof EditorState\n  },\n\n  createEmptyEditorState (editorDecorators) {\n    return EditorState.createEmpty(editorDecorators)\n  },\n\n  createEditorState (contentState, editorDecorators) {\n    return EditorState.createWithContent(contentState, editorDecorators)\n  },\n\n  isSelectionCollapsed (editorState) {\n    return editorState.getSelection().isCollapsed()\n  },\n\n  selectBlock (editorState, block) {\n\n    const blockKey = block.getKey()\n\n    return EditorState.forceSelection(editorState, new SelectionState({\n      anchorKey: blockKey,\n      anchorOffset: 0,\n      focusKey: blockKey,\n      focusOffset: block.getLength()\n    }))\n\n  },\n\n  selectNextBlock (editorState, block) {\n    const nextBlock = editorState.getCurrentContent().getBlockAfter(block.getKey())\n    return nextBlock ? this.selectBlock(editorState, nextBlock) : editorState\n  },\n\n  removeBlock (editorState, block, lastSelection = null) {\n\n    let nextContentState, nextEditorState\n    const blockKey = block.getKey()\n\n    nextContentState = Modifier.removeRange(editorState.getCurrentContent(), new SelectionState({\n      anchorKey: blockKey,\n      anchorOffset: 0,\n      focusKey: blockKey,\n      focusOffset: block.getLength()\n    }), 'backward')\n\n    nextContentState = Modifier.setBlockType(nextContentState, nextContentState.getSelectionAfter(), 'unstyled')\n    nextEditorState = EditorState.push(editorState, nextContentState, 'remove-range')\n    return EditorState.forceSelection(nextEditorState, lastSelection || nextContentState.getSelectionAfter())\n\n  },\n\n  getSelectionBlock (editorState) {\n    return editorState.getCurrentContent().getBlockForKey(editorState.getSelection().getAnchorKey())\n  },\n\n  setSelectionBlockData (editorState, blockData, override) {\n\n    let newBlockData = override ? blockData : Object.assign({}, this.getSelectionBlockData(editorState).toJS(), blockData)\n\n    Object.keys(newBlockData).forEach(key => {\n      if (newBlockData.hasOwnProperty(key) && newBlockData[key] === undefined) {\n        delete newBlockData[key]\n      }\n    })\n\n    return setBlockData(editorState, newBlockData)\n\n  },\n\n  getSelectionBlockData (editorState, name) {\n    const blockData = this.getSelectionBlock(editorState).getData()\n    return name ? blockData.get(name) : blockData\n  },\n\n  getSelectionBlockType (editorState) {\n    return this.getSelectionBlock(editorState).getType()\n  },\n\n  getSelectionText (editorState) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    if (selectionState.isCollapsed() || this.getSelectionBlockType(editorState) === 'atomic') {\n      return ''\n    }\n\n    const anchorKey = selectionState.getAnchorKey()\n    const currentContentBlock = contentState.getBlockForKey(anchorKey)\n    const start = selectionState.getStartOffset()\n    const end = selectionState.getEndOffset()\n\n    return currentContentBlock.getText().slice(start, end);\n\n  },\n\n  toggleSelectionBlockType (editorState, blockType) {\n    return RichUtils.toggleBlockType(editorState, blockType)\n  },\n\n  getSelectionEntityType (editorState) {\n\n    const entityKey = getSelectionEntity(editorState)\n\n    if (entityKey) {\n      const entity = editorState.getCurrentContent().getEntity(entityKey)\n      return entity ? entity.get('type') : null\n    }\n\n    return null\n\n  },\n\n  getSelectionEntityData (editorState, type) {\n\n    const entityKey = getSelectionEntity(editorState)\n\n    if (entityKey) {\n      const entity = editorState.getCurrentContent().getEntity(entityKey)\n      if (entity && entity.get('type') === type) {\n        return entity.getData()\n      } else {\n        return {}\n      }\n    } else {\n      return {}\n    }\n\n  },\n\n  toggleSelectionEntity (editorState, entity) {\n\n    const contentState = editorState.getCurrentContent()\n    const selectionState = editorState.getSelection()\n\n    if (selectionState.isCollapsed() || this.getSelectionBlockType(editorState) === 'atomic') {\n      return editorState\n    }\n\n    if (!entity || !entity.type || this.getSelectionEntityType(editorState) === entity.type) {\n      return EditorState.push(editorState, Modifier.applyEntity(contentState, selectionState, null), 'apply-entity')\n    }\n\n    try {\n\n      const nextContentState = contentState.createEntity(entity.type, entity.mutability, entity.data)\n      const entityKey = nextContentState.getLastCreatedEntityKey()\n\n      let nextEditorState = EditorState.set(editorState, {\n        currentContent: nextContentState\n      })\n\n      return EditorState.push(nextEditorState, Modifier.applyEntity(nextContentState, selectionState, entityKey), 'apply-entity')\n\n    } catch (error) {\n      console.warn(error)\n      return editorState\n    }\n\n  },\n\n  toggleSelectionLink (editorState, href, target) {\n\n    const contentState = editorState.getCurrentContent()\n    const selectionState = editorState.getSelection()\n\n    let entityData = { href, target }\n\n    if (selectionState.isCollapsed() || this.getSelectionBlockType(editorState) === 'atomic') {\n      return editorState\n    }\n\n    if (href === false) {\n      return RichUtils.toggleLink(editorState, selectionState, null)\n    }\n\n    if (href === null) {\n      delete entityData.href\n    }\n\n    try {\n\n      const nextContentState = contentState.createEntity('LINK', 'MUTABLE', entityData)\n      const entityKey = nextContentState.getLastCreatedEntityKey()\n\n      let nextEditorState = EditorState.set(editorState, {\n        currentContent: nextContentState\n      })\n\n      nextEditorState = RichUtils.toggleLink(nextEditorState, selectionState, entityKey)\n      nextEditorState = EditorState.forceSelection(nextEditorState, selectionState.merge({\n        anchorOffset: selectionState.getEndOffset(), \n        focusOffset: selectionState.getEndOffset()\n      }))\n\n      nextEditorState = EditorState.push(nextEditorState, Modifier.insertText(\n        nextEditorState.getCurrentContent(), nextEditorState.getSelection(), ' '\n      ), 'insert-text')\n\n      return nextEditorState\n\n    } catch (error) {\n      console.warn(error)\n      return editorState\n    }\n\n  },\n\n  getSelectionInlineStyle (editorState) {\n    return editorState.getCurrentInlineStyle()\n  },\n\n  selectionHasInlineStyle (editorState, style) {\n    return this.getSelectionInlineStyle(editorState).has(style.toUpperCase())\n  },\n\n  toggleSelectionInlineStyle (editorState, style, stylesToBeRemoved = []) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    style = style.toUpperCase()\n    stylesToBeRemoved = stylesToBeRemoved.filter(item => item !== style)\n\n    const nextContentState = stylesToBeRemoved.length ? stylesToBeRemoved.reduce((contentState, item) => {\n      return Modifier.removeInlineStyle(contentState, selectionState, item) \n    }, contentState) : contentState\n\n    const nextEditorState = stylesToBeRemoved.length ? EditorState.push(editorState, nextContentState, 'change-inline-style') : editorState\n    return RichUtils.toggleInlineStyle(nextEditorState, style)\n\n  },\n\n  removeSelectionInlineStyles (editorState) {\n    return removeAllInlineStyles(editorState)\n  },\n\n  toggleSelectionAlignment (editorState, alignment) {\n    return this.setSelectionBlockData(editorState, {\n      textAlign: this.getSelectionBlockData(editorState, 'textAlign') !== alignment ? alignment : undefined\n    })\n  },\n\n  toggleSelectionIndent (editorState, textIndent, maxIndent = 6) {\n    return textIndent < 0 || textIndent > maxIndent || isNaN(textIndent) ? editorState : this.setSelectionBlockData(editorState, {\n      textIndent: textIndent || undefined\n    })\n  },\n\n  increaseSelectionIndent (editorState, maxIndent = 6) {\n    const currentIndent = this.getSelectionBlockData(editorState, 'textIndent') || 0\n    return this.toggleSelectionIndent(editorState, currentIndent + 1, maxIndent)\n  },\n\n  decreaseSelectionIndent (editorState) {\n    const currentIndent = this.getSelectionBlockData(editorState, 'textIndent') || 0\n    return this.toggleSelectionIndent(editorState, currentIndent - 1)\n  },\n\n  toggleSelectionColor (editorState, color, colorList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'COLOR-' + color.replace('#', ''), colorList.map(item => 'COLOR-' + item.replace('#', '').toUpperCase()))\n  },\n\n  toggleSelectionBackgroundColor (editorState, color, colorList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'BGCOLOR-' + color.replace('#', ''), colorList.map(item => 'BGCOLOR-' + item.replace('#', '').toUpperCase()))\n  },\n\n  toggleSelectionFontSize (editorState, fontSize, fontSizeList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'FONTSIZE-' + fontSize, fontSizeList.map(item => 'FONTSIZE-' + item))\n  },\n\n  toggleSelectionLineHeight (editorState, lineHeight, lineHeightList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'LINEHEIGHT-' + lineHeight, lineHeightList.map(item => 'LINEHEIGHT-' + item))\n  },\n\n  toggleSelectionFontFamily (editorState, fontFamily, fontFamilyList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'FONTFAMILY-' + fontFamily, fontFamilyList.map(item => 'FONTFAMILY-' + item.name.toUpperCase()))\n  },\n\n  toggleSelectionLetterSpacing (editorState, letterSpacing, letterSpacingList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'LETTERSPACING-' + letterSpacing, letterSpacingList.map(item => 'LETTERSPACING-' + item))\n  },\n\n  insertText (editorState, text, inlineStyle, entity) {\n\n    const selectionState = editorState.getSelection()\n    const currentSelectedBlockType = this.getSelectionBlockType(editorState)\n\n    if (currentSelectedBlockType === 'atomic') {\n      return editorState\n    }\n\n    let entityKey\n    let contentState = editorState.getCurrentContent()\n\n    if (entity && entity.type) {\n      contentState = contentState.createEntity(entity.type, entity.mutability || 'MUTABLE', entity.data || entityData)\n      entityKey = contentState.getLastCreatedEntityKey()\n    }\n\n    if (!selectionState.isCollapsed()) {\n      return EditorState.push(editorState, Modifier.replaceText(contentState, selectionState, text, inlineStyle, entityKey), 'replace-text')\n    } else {\n      return EditorState.push(editorState, Modifier.insertText(contentState, selectionState, text, inlineStyle, entityKey), 'insert-text')\n    }\n\n  },\n\n  insertHTML (editorState, htmlString, source) {\n\n    if (!htmlString) {\n      return editorState\n    }\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n    const options = editorState.convertOptions || {}\n\n    try {\n\n      const { blockMap } = convertFromRaw(convertHTMLToRaw(htmlString, options, source))\n\n      return EditorState.push(editorState, Modifier.replaceWithFragment(\n        contentState, selectionState, blockMap\n      ), 'insert-fragment')\n\n    } catch (error) {\n      console.warn(error)\n      return editorState\n    }\n\n  },\n\n  insertAtomicBlock (editorState, type, immutable = true, data = {}) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    if (!selectionState.isCollapsed() || this.getSelectionBlockType(editorState) === 'atomic') {\n      return editorState\n    }\n\n    const contentStateWithEntity = contentState.createEntity(type, immutable ? 'IMMUTABLE' : 'MUTABLE', data)\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n    const newEditorState = AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ')\n\n    return newEditorState\n\n  },\n\n  insertHorizontalLine (editorState) {\n    return this.insertAtomicBlock(editorState, 'HR')\n  },\n\n  insertMedias (editorState, medias = []) {\n\n    if (!medias.length) {\n      return editorState\n    }\n\n    if (this.getSelectionBlockType(editorState) === 'atomic') {\n      this.selectNextBlock(editorState, this.getSelectionBlock(editorState))\n    }\n\n    return medias.reduce((editorState, media) => {\n      const { url, name, type, meta } = media\n      const contentStateWithEntity = editorState.getCurrentContent().createEntity(type, 'IMMUTABLE', { url, name, type, meta })\n      const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n      return AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ')\n    }, editorState)\n\n  },\n\n  setMediaData (editorState, entityKey, data) {\n    return EditorState.push(editorState, editorState.getCurrentContent().mergeEntityData(entityKey, data), 'change-block-data')\n  },\n\n  removeMedia (editorState, mediaBlock) {\n    return this.removeBlock(editorState, mediaBlock)\n  },\n\n  setMediaPosition (editorState, mediaBlock, position) {\n\n    let newPosition = {}\n    const { float, alignment } = position\n\n    if (typeof float !== 'undefined') {\n      newPosition.float = mediaBlock.getData().get('float') === float ? null : float\n    }\n\n    if (typeof alignment !== 'undefined') {\n      newPosition.alignment = mediaBlock.getData().get('alignment') === alignment ? null : alignment\n    }\n\n    return this.setSelectionBlockData(this.selectBlock(editorState, mediaBlock), newPosition)\n\n  },\n\n  clear (editorState) {\n\n    const contentState = editorState.getCurrentContent()\n\n    const firstBlock = contentState.getFirstBlock()\n    const lastBlock = contentState.getLastBlock()\n\n    const allSelected = new SelectionState({\n      anchorKey: firstBlock.getKey(),\n      anchorOffset: 0,\n      focusKey: lastBlock.getKey(),\n      focusOffset: lastBlock.getLength(),\n      hasFocus: true\n    })\n\n    return EditorState.push(\n      editorState,\n      Modifier.removeRange(contentState, allSelected, 'backward'),\n      'remove-range'\n    )\n\n  },\n\n  handleKeyCommand (editorState, command) {\n    return RichUtils.handleKeyCommand(editorState, command)\n  },\n\n  handleNewLine (editorState, event) {\n    return handleNewLine(editorState, event)\n  },\n\n  undo (editorState) {\n    return EditorState.undo(editorState)\n  },\n\n  redo (editorState) {\n    return EditorState.redo(editorState)\n  }\n\n}"]}