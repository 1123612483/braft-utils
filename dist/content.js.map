{"version":3,"sources":["../src/content.js"],"names":["selectionCollapsed","editorState","getSelection","isCollapsed","selectBlock","block","blockKey","getKey","EditorState","forceSelection","SelectionState","anchorKey","anchorOffset","focusKey","focusOffset","getLength","selectNextBlock","nextBlock","getCurrentContent","getBlockAfter","removeBlock","lastSelection","nextContentState","nextEditorState","Modifier","removeRange","setBlockType","getSelectionAfter","push","getSelectionBlock","getBlockForKey","getAnchorKey","setSelectionBlockData","blockData","getSelectionBlockData","name","getData","get","getSelectionBlockType","getType","getSelectionText","selectionState","contentState","currentContentBlock","start","getStartOffset","end","getEndOffset","getText","slice","toggleSelectionBlockType","blockType","RichUtils","toggleBlockType","getSelectionEntityData","type","entityKey","entity","getEntity","href","target","getSelectionInlineStyle","getCurrentInlineStyle","selectionHasInlineStyle","style","has","toUpperCase","toggleSelectionInlineStyle","stylesToBeRemoved","filter","item","currentInlineStyle","length","reduce","removeInlineStyle","toggleInlineStyle","removeSelectionInlineStyles","toggleSelectionAlignment","alignment","textAlign","undefined","toggleSelectionColor","color","colorList","replace","map","toggleSelectionBackgroundColor","toggleSelectionFontSize","fontSize","fontSizeList","toggleSelectionLineHeight","lineHeight","lineHeightList","toggleSelectionFontFamily","fontFamily","fontFamilyList","toggleSelectionLetterSpacing","letterSpacing","letterSpacingList","toggleSelectionIndent","indent","indentList","insertHorizontalLine","contentStateWithEntity","createEntity","getLastCreatedEntityKey","newEditorState","AtomicBlockUtils","insertAtomicBlock","toggleSelectionLink","entityData","toggleLink","set","currentContent","merge","insertText","error","console","warn","text","currentSelectedBlockType","replaceText","insertHTML","htmlString","blockMap","replaceWithFragment","insertMedias","medias","media","url","meta","setMediaData","data","mergeEntityData","removeMedia","mediaBlock","setMediaPosition","position","newPosition","float","clear","firstBlock","getFirstBlock","lastBlock","getLastBlock","allSelected","hasFocus","handleKeyCommand","command","undo","redo"],"mappings":"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","file":"content.js","sourcesContent":["import { Modifier, EditorState, SelectionState, RichUtils, AtomicBlockUtils, convertFromRaw } from 'draft-js'\nimport { setBlockData, getSelectionEntity, removeAllInlineStyles } from 'draftjs-utils'\nimport { detectColorsFromHTMLString, detectColorsFromDraftState } from './color'\nimport { convertHTMLToRaw } from 'braft-convert'\n\nexport default {\n\n  selectionCollapsed (editorState) {\n    return editorState.getSelection().isCollapsed()\n  },\n\n  selectBlock (editorState, block) {\n\n    const blockKey = block.getKey()\n\n    return EditorState.forceSelection(editorState, new SelectionState({\n      anchorKey: blockKey,\n      anchorOffset: 0,\n      focusKey: blockKey,\n      focusOffset: block.getLength()\n    }))\n\n  },\n\n  selectNextBlock (editorState, block) {\n    const nextBlock = editorState.getCurrentContent().getBlockAfter(block.getKey())\n    return nextBlock ? this.selectBlock(editorState, nextBlock) : editorState\n  },\n\n  removeBlock (editorState, block, lastSelection = null) {\n\n    let nextContentState, nextEditorState\n    const blockKey = block.getKey()\n\n    nextContentState = Modifier.removeRange(editorState.getCurrentContent(), new SelectionState({\n      anchorKey: blockKey,\n      anchorOffset: 0,\n      focusKey: blockKey,\n      focusOffset: block.getLength()\n    }), 'backward')\n\n    nextContentState = Modifier.setBlockType(nextContentState, nextContentState.getSelectionAfter(), 'unstyled')\n    nextEditorState = EditorState.push(editorState, nextContentState, 'remove-range')\n    return EditorState.forceSelection(nextEditorState, lastSelection || nextContentState.getSelectionAfter())\n\n  },\n\n  getSelectionBlock (editorState) {\n    return editorState.getCurrentContent().getBlockForKey(editorState.getSelection().getAnchorKey())\n  },\n\n  setSelectionBlockData (editorState, blockData) {\n    return setBlockData(editorState, blockData)\n  },\n\n  getSelectionBlockData (editorState, name) {\n    const blockData = this.getSelectionBlock(editorState).getData()\n    return name ? blockData.get(name) : blockData\n  },\n\n  getSelectionBlockType (editorState) {\n    return this.getSelectionBlock(editorState).getType()\n  },\n\n  getSelectionText (editorState) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    if (selectionState.isCollapsed() || this.getSelectionBlockType(editorState) === 'atomic') {\n      return ''\n    }\n\n    const anchorKey = selectionState.getAnchorKey()\n    const currentContentBlock = contentState.getBlockForKey(anchorKey)\n    const start = selectionState.getStartOffset()\n    const end = selectionState.getEndOffset()\n\n    return currentContentBlock.getText().slice(start, end);\n\n  },\n\n  toggleSelectionBlockType (editorState, blockType) {\n    return RichUtils.toggleBlockType(editorState, blockType)\n  },\n\n  getSelectionEntityData (editorState, type) {\n\n    const entityKey = getSelectionEntity(editorState)\n\n    if (entityKey) {\n      let entity = editorState.getCurrentContent().getEntity(entityKey)\n      if (entity && entity.get('type') === type) {\n        let { href, target } = entity.getData()\n        return { href, target }\n      } else {\n        return {}\n      }\n    } else {\n      return {}\n    }\n\n  },\n\n  getSelectionInlineStyle (editorState) {\n    return editorState.getCurrentInlineStyle()\n  },\n\n  selectionHasInlineStyle (editorState, style) {\n    return this.getSelectionInlineStyle(editorState).has(style.toUpperCase())\n  },\n\n  toggleSelectionInlineStyle (editorState, style, stylesToBeRemoved = []) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    if (selectionState.isCollapsed()) {\n      return editorState\n    }\n\n    style = style.toUpperCase()\n    stylesToBeRemoved = stylesToBeRemoved.filter(item => item !== style)\n\n    const currentInlineStyle = this.getSelectionInlineStyle(editorState)\n    const nextContentState = stylesToBeRemoved.length ? stylesToBeRemoved.reduce((contentState, item) => {\n      return Modifier.removeInlineStyle(contentState, selectionState, item) \n    }, contentState) : contentState\n\n    const nextEditorState = stylesToBeRemoved.length ? EditorState.push(editorState, nextContentState, 'change-inline-style') : editorState\n    return RichUtils.toggleInlineStyle(nextEditorState, style)\n\n  },\n\n  removeSelectionInlineStyles (editorState) {\n    return removeAllInlineStyles(editorState)\n  },\n\n  toggleSelectionAlignment (editorState, alignment) {\n    return this.setSelectionBlockData(editorState, {\n      textAlign: this.getSelectionBlockData(editorState, 'textAlign') !== alignment ? alignment : undefined\n    })\n  },\n\n  toggleSelectionColor (editorState, color, colorList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'COLOR-' + color.replace('#', ''), colorList.map(item => 'COLOR-' + item.replace('#', '').toUpperCase()))\n  },\n\n  toggleSelectionBackgroundColor (editorState, color, colorList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'BGCOLOR-' + color.replace('#', ''), colorList.map(item => 'BGCOLOR-' + item.replace('#', '').toUpperCase()))\n  },\n\n  toggleSelectionFontSize (editorState, fontSize, fontSizeList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'FONTSIZE-' + fontSize, fontSizeList.map(item => 'FONTSIZE-' + item))\n  },\n\n  toggleSelectionLineHeight (editorState, lineHeight, lineHeightList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'LINEHEIGHT-' + lineHeight, lineHeightList.map(item => 'LINEHEIGHT-' + item))\n  },\n\n  toggleSelectionFontFamily (editorState, fontFamily, fontFamilyList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'FONTFAMILY-' + fontFamily, fontFamilyList.map(item => 'FONTFAMILY-' + item.name.toUpperCase()))\n  },\n\n  toggleSelectionLetterSpacing (editorState, letterSpacing, letterSpacingList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'LETTERSPACING-' + letterSpacing, letterSpacingList.map(item => 'LETTERSPACING-' + item))\n  },\n\n  toggleSelectionIndent (editorState, indent, indentList= []) {\n    return this.toggleSelectionInlineStyle(editorState, 'INDENT-' + indent, indentList.map(item => 'INDENT-' + item))\n  },\n\n  insertHorizontalLine (editorState) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    if (!selectionState.isCollapsed() || this.getSelectionBlockType(editorState) === 'atomic') {\n      return editorState\n    }\n\n    const contentStateWithEntity = contentState.createEntity('HR', 'IMMUTABLE', {})\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n    const newEditorState = AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ')\n\n    return newEditorState\n\n  },\n\n  toggleSelectionLink (editorState, href, target) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    let entityData = { href, target }\n\n    if (selectionState.isCollapsed() || this.getSelectionBlockType(editorState) === 'atomic') {\n      return editorState\n    }\n\n    if (href === false) {\n      return RichUtils.toggleLink(editorState, selectionState, null)\n    }\n\n    if (href === null) {\n      delete entityData.href\n    }\n\n    try {\n\n      const nextContentState = contentState.createEntity('LINK', 'MUTABLE', entityData)\n      const entityKey = nextContentState.getLastCreatedEntityKey()\n\n      let nextEditorState = EditorState.set(editorState, {\n        currentContent: nextContentState\n      })\n\n      nextEditorState = RichUtils.toggleLink(nextEditorState, selectionState, entityKey)\n      nextEditorState = EditorState.forceSelection(nextEditorState, selectionState.merge({\n        anchorOffset: selectionState.getEndOffset(), \n        focusOffset: selectionState.getEndOffset()\n      }))\n\n      nextEditorState = EditorState.push(nextEditorState, Modifier.insertText(\n        nextEditorState.getCurrentContent(), nextEditorState.getSelection(), ' '\n      ), 'insert-text')\n\n      return nextEditorState\n\n    } catch (error) {\n      console.warn(error)\n      return editorState\n    }\n\n  },\n\n  insertText (editorState, text, replace = true) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n    const currentSelectedBlockType = this.getSelectionBlockType(editorState)\n\n    if (currentSelectedBlockType === 'atomic') {\n      return editorState\n    }\n\n    if (!selectionState.isCollapsed()) {\n      return replace ? EditorState.push(editorState, Modifier.replaceText(\n        contentState, selectionState, text\n      ), 'replace-text') : editorState\n    } else {\n      return EditorState.push(editorState, Modifier.insertText(\n        contentState, selectionState, text\n      ), 'insert-text')\n    }\n\n  },\n\n  insertHTML (editorState, htmlString) {\n\n    if (!htmlString) {\n      return editorState\n    }\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    try {\n\n      const { blockMap } = convertFromRaw(convertHTMLToRaw(htmlString))\n\n      return EditorState.push(editorState, Modifier.replaceWithFragment(\n        contentState, selectionState, blockMap\n      ), 'insert-fragment')\n\n    } catch (error) {\n      console.warn(error)\n      return editorState\n    }\n\n  },\n\n  insertMedias (editorState, medias = []) {\n\n    if (!medias.length) {\n      return editorState\n    }\n\n    if (this.getSelectionBlockType(editorState) === 'atomic') {\n      this.selectNextBlock(editorState, this.getSelectionBlock(editorState))\n    }\n\n    return medias.reduce((editorState, media) => {\n      const { url, name, type, meta } = media\n      const contentStateWithEntity = editorState.getCurrentContent().createEntity(type, 'IMMUTABLE', { url, name, type, meta })\n      const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n      return AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ')\n    }, editorState)\n\n  },\n\n  setMediaData (editorState, entityKey, data) {\n    return EditorState.push(editorState, editorState.getCurrentContent().mergeEntityData(entityKey, data), 'change-block-data')\n  },\n\n  removeMedia (editorState, mediaBlock) {\n    return this.removeBlock(editorState, mediaBlock)\n  },\n\n  setMediaPosition (editorState, mediaBlock, position) {\n\n    let newPosition = {}\n    const { float, alignment } = position\n\n    if (typeof float !== 'undefined') {\n      newPosition.float = mediaBlock.getData().get('float') === float ? null : float\n    }\n\n    if (typeof alignment !== 'undefined') {\n      newPosition.alignment = mediaBlock.getData().get('alignment') === alignment ? null : alignment\n    }\n\n    return this.setSelectionBlockData(this.selectBlock(editorState, mediaBlock), newPosition)\n\n  },\n\n  clear (editorState) {\n\n    const contentState = editorState.getCurrentContent()\n\n    const firstBlock = contentState.getFirstBlock()\n    const lastBlock = contentState.getLastBlock()\n\n    const allSelected = new SelectionState({\n      anchorKey: firstBlock.getKey(),\n      anchorOffset: 0,\n      focusKey: lastBlock.getKey(),\n      focusOffset: lastBlock.getLength(),\n      hasFocus: true\n    })\n\n    return EditorState.push(\n      editorState,\n      Modifier.removeRange(contentState, allSelected, 'backward'),\n      'remove-range'\n    )\n\n  },\n\n  handleKeyCommand (editorState, command) {\n    return RichUtils.handleKeyCommand(editorState, command)\n  },\n\n  undo (editorState) {\n    return EditorState.undo(editorState)\n  },\n\n  redo (editorState) {\n    return EditorState.redo(editorState)\n  }\n\n}"]}