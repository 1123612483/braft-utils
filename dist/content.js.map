{"version":3,"sources":["../src/content.js"],"names":["isEditorState","editorState","EditorState","createEmptyEditorState","editorDecorators","createEmpty","createEditorState","contentState","createWithContent","isSelectionCollapsed","getSelection","isCollapsed","selectBlock","block","blockKey","getKey","forceSelection","SelectionState","anchorKey","anchorOffset","focusKey","focusOffset","getLength","selectNextBlock","nextBlock","getCurrentContent","getBlockAfter","removeBlock","lastSelection","nextContentState","nextEditorState","Modifier","removeRange","setBlockType","getSelectionAfter","push","getSelectionBlock","getBlockForKey","getAnchorKey","setSelectionBlockData","blockData","override","newBlockData","Object","assign","getSelectionBlockData","toJS","keys","forEach","hasOwnProperty","key","undefined","name","getData","get","getSelectionBlockType","getType","getSelectionText","selectionState","currentContentBlock","start","getStartOffset","end","getEndOffset","getText","slice","toggleSelectionBlockType","blockType","RichUtils","toggleBlockType","getSelectionEntityData","type","entityKey","entity","getEntity","href","target","getSelectionInlineStyle","getCurrentInlineStyle","selectionHasInlineStyle","style","has","toUpperCase","toggleSelectionInlineStyle","stylesToBeRemoved","filter","item","length","reduce","removeInlineStyle","toggleInlineStyle","removeSelectionInlineStyles","toggleSelectionAlignment","alignment","textAlign","toggleSelectionIndent","textIndent","maxIndent","isNaN","increaseSelectionIndent","currentIndent","decreaseSelectionIndent","toggleSelectionColor","color","colorList","replace","map","toggleSelectionBackgroundColor","toggleSelectionFontSize","fontSize","fontSizeList","toggleSelectionLineHeight","lineHeight","lineHeightList","toggleSelectionFontFamily","fontFamily","fontFamilyList","toggleSelectionLetterSpacing","letterSpacing","letterSpacingList","toggleSelectionLink","entityData","toggleLink","createEntity","getLastCreatedEntityKey","set","currentContent","merge","insertText","error","console","warn","text","currentSelectedBlockType","replaceText","insertHTML","htmlString","blockMap","replaceWithFragment","insertAtomicBlock","immutable","data","contentStateWithEntity","newEditorState","AtomicBlockUtils","insertHorizontalLine","insertMedias","medias","media","url","meta","setMediaData","mergeEntityData","removeMedia","mediaBlock","setMediaPosition","position","newPosition","float","clear","firstBlock","getFirstBlock","lastBlock","getLastBlock","allSelected","hasFocus","handleKeyCommand","command","handleNewLine","event","undo","redo"],"mappings":"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","file":"content.js","sourcesContent":["import { Modifier, EditorState, SelectionState, RichUtils, AtomicBlockUtils, convertFromRaw } from 'draft-js'\nimport { setBlockData, getSelectionEntity, removeAllInlineStyles, handleNewLine } from 'draftjs-utils'\nimport { convertHTMLToRaw } from 'braft-convert'\n\nexport default {\n\n  isEditorState (editorState) {\n    return editorState instanceof EditorState\n  },\n\n  createEmptyEditorState (editorDecorators) {\n    return EditorState.createEmpty(editorDecorators)\n  },\n\n  createEditorState (contentState, editorDecorators) {\n    return EditorState.createWithContent(contentState, editorDecorators)\n  },\n\n  isSelectionCollapsed (editorState) {\n    return editorState.getSelection().isCollapsed()\n  },\n\n  selectBlock (editorState, block) {\n\n    const blockKey = block.getKey()\n\n    return EditorState.forceSelection(editorState, new SelectionState({\n      anchorKey: blockKey,\n      anchorOffset: 0,\n      focusKey: blockKey,\n      focusOffset: block.getLength()\n    }))\n\n  },\n\n  selectNextBlock (editorState, block) {\n    const nextBlock = editorState.getCurrentContent().getBlockAfter(block.getKey())\n    return nextBlock ? this.selectBlock(editorState, nextBlock) : editorState\n  },\n\n  removeBlock (editorState, block, lastSelection = null) {\n\n    let nextContentState, nextEditorState\n    const blockKey = block.getKey()\n\n    nextContentState = Modifier.removeRange(editorState.getCurrentContent(), new SelectionState({\n      anchorKey: blockKey,\n      anchorOffset: 0,\n      focusKey: blockKey,\n      focusOffset: block.getLength()\n    }), 'backward')\n\n    nextContentState = Modifier.setBlockType(nextContentState, nextContentState.getSelectionAfter(), 'unstyled')\n    nextEditorState = EditorState.push(editorState, nextContentState, 'remove-range')\n    return EditorState.forceSelection(nextEditorState, lastSelection || nextContentState.getSelectionAfter())\n\n  },\n\n  getSelectionBlock (editorState) {\n    return editorState.getCurrentContent().getBlockForKey(editorState.getSelection().getAnchorKey())\n  },\n\n  setSelectionBlockData (editorState, blockData, override) {\n\n    let newBlockData = override ? blockData : Object.assign({}, this.getSelectionBlockData(editorState).toJS(), blockData)\n\n    Object.keys(newBlockData).forEach(key => {\n      if (newBlockData.hasOwnProperty(key) && newBlockData[key] === undefined) {\n        delete newBlockData[key]\n      }\n    })\n\n    return setBlockData(editorState, newBlockData)\n\n  },\n\n  getSelectionBlockData (editorState, name) {\n    const blockData = this.getSelectionBlock(editorState).getData()\n    return name ? blockData.get(name) : blockData\n  },\n\n  getSelectionBlockType (editorState) {\n    return this.getSelectionBlock(editorState).getType()\n  },\n\n  getSelectionText (editorState) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    if (selectionState.isCollapsed() || this.getSelectionBlockType(editorState) === 'atomic') {\n      return ''\n    }\n\n    const anchorKey = selectionState.getAnchorKey()\n    const currentContentBlock = contentState.getBlockForKey(anchorKey)\n    const start = selectionState.getStartOffset()\n    const end = selectionState.getEndOffset()\n\n    return currentContentBlock.getText().slice(start, end);\n\n  },\n\n  toggleSelectionBlockType (editorState, blockType) {\n    return RichUtils.toggleBlockType(editorState, blockType)\n  },\n\n  getSelectionEntityData (editorState, type) {\n\n    const entityKey = getSelectionEntity(editorState)\n\n    if (entityKey) {\n      let entity = editorState.getCurrentContent().getEntity(entityKey)\n      if (entity && entity.get('type') === type) {\n        let { href, target } = entity.getData()\n        return { href, target }\n      } else {\n        return {}\n      }\n    } else {\n      return {}\n    }\n\n  },\n\n  getSelectionInlineStyle (editorState) {\n    return editorState.getCurrentInlineStyle()\n  },\n\n  selectionHasInlineStyle (editorState, style) {\n    return this.getSelectionInlineStyle(editorState).has(style.toUpperCase())\n  },\n\n  toggleSelectionInlineStyle (editorState, style, stylesToBeRemoved = []) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    style = style.toUpperCase()\n    stylesToBeRemoved = stylesToBeRemoved.filter(item => item !== style)\n\n    const nextContentState = stylesToBeRemoved.length ? stylesToBeRemoved.reduce((contentState, item) => {\n      return Modifier.removeInlineStyle(contentState, selectionState, item) \n    }, contentState) : contentState\n\n    const nextEditorState = stylesToBeRemoved.length ? EditorState.push(editorState, nextContentState, 'change-inline-style') : editorState\n    return RichUtils.toggleInlineStyle(nextEditorState, style)\n\n  },\n\n  removeSelectionInlineStyles (editorState) {\n    return removeAllInlineStyles(editorState)\n  },\n\n  toggleSelectionAlignment (editorState, alignment) {\n    return this.setSelectionBlockData(editorState, {\n      textAlign: this.getSelectionBlockData(editorState, 'textAlign') !== alignment ? alignment : undefined\n    })\n  },\n\n  toggleSelectionIndent (editorState, textIndent, maxIndent = 6) {\n    return textIndent < 0 || textIndent > maxIndent || isNaN(textIndent) ? editorState : this.setSelectionBlockData(editorState, {\n      textIndent: textIndent || undefined\n    })\n  },\n\n  increaseSelectionIndent (editorState, maxIndent = 6) {\n    const currentIndent = this.getSelectionBlockData(editorState, 'textIndent') || 0\n    return this.toggleSelectionIndent(editorState, currentIndent + 1, maxIndent)\n  },\n\n  decreaseSelectionIndent (editorState) {\n    const currentIndent = this.getSelectionBlockData(editorState, 'textIndent') || 0\n    return this.toggleSelectionIndent(editorState, currentIndent - 1)\n  },\n\n  toggleSelectionColor (editorState, color, colorList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'COLOR-' + color.replace('#', ''), colorList.map(item => 'COLOR-' + item.replace('#', '').toUpperCase()))\n  },\n\n  toggleSelectionBackgroundColor (editorState, color, colorList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'BGCOLOR-' + color.replace('#', ''), colorList.map(item => 'BGCOLOR-' + item.replace('#', '').toUpperCase()))\n  },\n\n  toggleSelectionFontSize (editorState, fontSize, fontSizeList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'FONTSIZE-' + fontSize, fontSizeList.map(item => 'FONTSIZE-' + item))\n  },\n\n  toggleSelectionLineHeight (editorState, lineHeight, lineHeightList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'LINEHEIGHT-' + lineHeight, lineHeightList.map(item => 'LINEHEIGHT-' + item))\n  },\n\n  toggleSelectionFontFamily (editorState, fontFamily, fontFamilyList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'FONTFAMILY-' + fontFamily, fontFamilyList.map(item => 'FONTFAMILY-' + item.name.toUpperCase()))\n  },\n\n  toggleSelectionLetterSpacing (editorState, letterSpacing, letterSpacingList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'LETTERSPACING-' + letterSpacing, letterSpacingList.map(item => 'LETTERSPACING-' + item))\n  },\n\n  toggleSelectionLink (editorState, href, target) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    let entityData = { href, target }\n\n    if (selectionState.isCollapsed() || this.getSelectionBlockType(editorState) === 'atomic') {\n      return editorState\n    }\n\n    if (href === false) {\n      return RichUtils.toggleLink(editorState, selectionState, null)\n    }\n\n    if (href === null) {\n      delete entityData.href\n    }\n\n    try {\n\n      const nextContentState = contentState.createEntity('LINK', 'MUTABLE', entityData)\n      const entityKey = nextContentState.getLastCreatedEntityKey()\n\n      let nextEditorState = EditorState.set(editorState, {\n        currentContent: nextContentState\n      })\n\n      nextEditorState = RichUtils.toggleLink(nextEditorState, selectionState, entityKey)\n      nextEditorState = EditorState.forceSelection(nextEditorState, selectionState.merge({\n        anchorOffset: selectionState.getEndOffset(), \n        focusOffset: selectionState.getEndOffset()\n      }))\n\n      nextEditorState = EditorState.push(nextEditorState, Modifier.insertText(\n        nextEditorState.getCurrentContent(), nextEditorState.getSelection(), ' '\n      ), 'insert-text')\n\n      return nextEditorState\n\n    } catch (error) {\n      console.warn(error)\n      return editorState\n    }\n\n  },\n\n  insertText (editorState, text, replace = true) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n    const currentSelectedBlockType = this.getSelectionBlockType(editorState)\n\n    if (currentSelectedBlockType === 'atomic') {\n      return editorState\n    }\n\n    if (!selectionState.isCollapsed()) {\n      return replace ? EditorState.push(editorState, Modifier.replaceText(\n        contentState, selectionState, text\n      ), 'replace-text') : editorState\n    } else {\n      return EditorState.push(editorState, Modifier.insertText(\n        contentState, selectionState, text\n      ), 'insert-text')\n    }\n\n  },\n\n  insertHTML (editorState, htmlString) {\n\n    if (!htmlString) {\n      return editorState\n    }\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    try {\n\n      const { blockMap } = convertFromRaw(convertHTMLToRaw(htmlString))\n\n      return EditorState.push(editorState, Modifier.replaceWithFragment(\n        contentState, selectionState, blockMap\n      ), 'insert-fragment')\n\n    } catch (error) {\n      console.warn(error)\n      return editorState\n    }\n\n  },\n\n  insertAtomicBlock (editorState, type, immutable = true, data = {}) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    if (!selectionState.isCollapsed() || this.getSelectionBlockType(editorState) === 'atomic') {\n      return editorState\n    }\n\n    const contentStateWithEntity = contentState.createEntity(type, immutable ? 'IMMUTABLE' : 'MUTABLE', data)\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n    const newEditorState = AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ')\n\n    return newEditorState\n\n  },\n\n  insertHorizontalLine (editorState) {\n    return this.insertAtomicBlock(editorState, 'HR')\n  },\n\n  insertMedias (editorState, medias = []) {\n\n    if (!medias.length) {\n      return editorState\n    }\n\n    if (this.getSelectionBlockType(editorState) === 'atomic') {\n      this.selectNextBlock(editorState, this.getSelectionBlock(editorState))\n    }\n\n    return medias.reduce((editorState, media) => {\n      const { url, name, type, meta } = media\n      const contentStateWithEntity = editorState.getCurrentContent().createEntity(type, 'IMMUTABLE', { url, name, type, meta })\n      const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n      return AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ')\n    }, editorState)\n\n  },\n\n  setMediaData (editorState, entityKey, data) {\n    return EditorState.push(editorState, editorState.getCurrentContent().mergeEntityData(entityKey, data), 'change-block-data')\n  },\n\n  removeMedia (editorState, mediaBlock) {\n    return this.removeBlock(editorState, mediaBlock)\n  },\n\n  setMediaPosition (editorState, mediaBlock, position) {\n\n    let newPosition = {}\n    const { float, alignment } = position\n\n    if (typeof float !== 'undefined') {\n      newPosition.float = mediaBlock.getData().get('float') === float ? null : float\n    }\n\n    if (typeof alignment !== 'undefined') {\n      newPosition.alignment = mediaBlock.getData().get('alignment') === alignment ? null : alignment\n    }\n\n    return this.setSelectionBlockData(this.selectBlock(editorState, mediaBlock), newPosition)\n\n  },\n\n  clear (editorState) {\n\n    const contentState = editorState.getCurrentContent()\n\n    const firstBlock = contentState.getFirstBlock()\n    const lastBlock = contentState.getLastBlock()\n\n    const allSelected = new SelectionState({\n      anchorKey: firstBlock.getKey(),\n      anchorOffset: 0,\n      focusKey: lastBlock.getKey(),\n      focusOffset: lastBlock.getLength(),\n      hasFocus: true\n    })\n\n    return EditorState.push(\n      editorState,\n      Modifier.removeRange(contentState, allSelected, 'backward'),\n      'remove-range'\n    )\n\n  },\n\n  handleKeyCommand (editorState, command) {\n    return RichUtils.handleKeyCommand(editorState, command)\n  },\n\n  handleNewLine (editorState, event) {\n    return handleNewLine(editorState, event)\n  },\n\n  undo (editorState) {\n    return EditorState.undo(editorState)\n  },\n\n  redo (editorState) {\n    return EditorState.redo(editorState)\n  }\n\n}"]}