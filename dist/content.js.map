{"version":3,"sources":["../src/content.js"],"names":["isEditorState","editorState","EditorState","createEmptyEditorState","editorDecorators","createEmpty","createEditorState","contentState","createWithContent","isSelectionCollapsed","getSelection","isCollapsed","selectBlock","block","blockKey","getKey","forceSelection","SelectionState","anchorKey","anchorOffset","focusKey","focusOffset","getLength","selectNextBlock","nextBlock","getCurrentContent","getBlockAfter","removeBlock","lastSelection","nextContentState","nextEditorState","Modifier","removeRange","setBlockType","getSelectionAfter","push","getSelectionBlock","getBlockForKey","getAnchorKey","setSelectionBlockData","blockData","override","newBlockData","Object","assign","getSelectionBlockData","toJS","keys","forEach","hasOwnProperty","key","undefined","name","getData","get","getSelectionBlockType","getType","getSelectionText","selectionState","currentContentBlock","start","getStartOffset","end","getEndOffset","getText","slice","toggleSelectionBlockType","blockType","RichUtils","toggleBlockType","getSelectionEntityType","entityKey","entity","getEntity","getSelectionEntityData","type","toggleSelectionEntity","applyEntity","createEntity","mutability","data","getLastCreatedEntityKey","set","currentContent","error","console","warn","toggleSelectionLink","href","target","entityData","toggleLink","merge","insertText","getSelectionInlineStyle","getCurrentInlineStyle","selectionHasInlineStyle","style","has","toUpperCase","toggleSelectionInlineStyle","prefix","stylesToBeRemoved","filter","item","indexOf","length","reduce","toggleInlineStyle","removeSelectionInlineStyles","toggleSelectionAlignment","alignment","textAlign","toggleSelectionIndent","textIndent","maxIndent","isNaN","increaseSelectionIndent","currentIndent","decreaseSelectionIndent","toggleSelectionColor","color","replace","toggleSelectionBackgroundColor","toggleSelectionFontSize","fontSize","toggleSelectionLineHeight","lineHeight","toggleSelectionFontFamily","fontFamily","toggleSelectionLetterSpacing","letterSpacing","text","inlineStyle","currentSelectedBlockType","replaceText","insertHTML","htmlString","source","options","convertOptions","blockMap","replaceWithFragment","insertAtomicBlock","immutable","contentStateWithEntity","newEditorState","AtomicBlockUtils","insertHorizontalLine","insertMedias","medias","media","url","meta","setMediaData","mergeEntityData","removeMedia","mediaBlock","setMediaPosition","position","newPosition","float","clear","firstBlock","getFirstBlock","lastBlock","getLastBlock","allSelected","hasFocus","handleKeyCommand","command","undo","redo"],"mappings":"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","file":"content.js","sourcesContent":["import { Modifier, EditorState, SelectionState, RichUtils, AtomicBlockUtils, convertFromRaw } from 'draft-js'\nimport { setBlockData, getSelectionEntity, removeAllInlineStyles } from 'draftjs-utils'\nimport { convertHTMLToRaw } from 'braft-convert'\n\nexport const isEditorState = (editorState) => {\n  return editorState instanceof EditorState\n}\n\nexport const createEmptyEditorState = (editorDecorators) => {\n  return EditorState.createEmpty(editorDecorators)\n}\n\nexport const createEditorState = (contentState, editorDecorators) => {\n  return EditorState.createWithContent(contentState, editorDecorators)\n}\n\nexport const isSelectionCollapsed = (editorState) => {\n  return editorState.getSelection().isCollapsed()\n}\n\nexport const selectBlock = (editorState, block) => {\n\n  const blockKey = block.getKey()\n\n  return EditorState.forceSelection(editorState, new SelectionState({\n    anchorKey: blockKey,\n    anchorOffset: 0,\n    focusKey: blockKey,\n    focusOffset: block.getLength()\n  }))\n\n}\n\nexport const selectNextBlock = (editorState, block) => {\n  const nextBlock = editorState.getCurrentContent().getBlockAfter(block.getKey())\n  return nextBlock ? selectBlock(editorState, nextBlock) : editorState\n}\n\nexport const removeBlock = (editorState, block, lastSelection = null) => {\n\n  let nextContentState, nextEditorState\n  const blockKey = block.getKey()\n\n  nextContentState = Modifier.removeRange(editorState.getCurrentContent(), new SelectionState({\n    anchorKey: blockKey,\n    anchorOffset: 0,\n    focusKey: blockKey,\n    focusOffset: block.getLength()\n  }), 'backward')\n\n  nextContentState = Modifier.setBlockType(nextContentState, nextContentState.getSelectionAfter(), 'unstyled')\n  nextEditorState = EditorState.push(editorState, nextContentState, 'remove-range')\n  return EditorState.forceSelection(nextEditorState, lastSelection || nextContentState.getSelectionAfter())\n\n}\n\nexport const getSelectionBlock = (editorState) => {\n  return editorState.getCurrentContent().getBlockForKey(editorState.getSelection().getAnchorKey())\n}\n\nexport const setSelectionBlockData = (editorState, blockData, override) => {\n\n  let newBlockData = override ? blockData : Object.assign({}, getSelectionBlockData(editorState).toJS(), blockData)\n\n  Object.keys(newBlockData).forEach(key => {\n    if (newBlockData.hasOwnProperty(key) && newBlockData[key] === undefined) {\n      delete newBlockData[key]\n    }\n  })\n\n  return setBlockData(editorState, newBlockData)\n\n}\n\nexport const getSelectionBlockData = (editorState, name) => {\n  const blockData = getSelectionBlock(editorState).getData()\n  return name ? blockData.get(name) : blockData\n}\n\nexport const getSelectionBlockType = (editorState) => {\n  return getSelectionBlock(editorState).getType()\n}\n\nexport const getSelectionText = (editorState) => {\n\n  const selectionState = editorState.getSelection()\n  const contentState = editorState.getCurrentContent()\n\n  if (selectionState.isCollapsed() || getSelectionBlockType(editorState) === 'atomic') {\n    return ''\n  }\n\n  const anchorKey = selectionState.getAnchorKey()\n  const currentContentBlock = contentState.getBlockForKey(anchorKey)\n  const start = selectionState.getStartOffset()\n  const end = selectionState.getEndOffset()\n\n  return currentContentBlock.getText().slice(start, end);\n\n}\n\nexport const toggleSelectionBlockType = (editorState, blockType) => {\n  return RichUtils.toggleBlockType(editorState, blockType)\n}\n\nexport const getSelectionEntityType = (editorState) => {\n\n  const entityKey = getSelectionEntity(editorState)\n\n  if (entityKey) {\n    const entity = editorState.getCurrentContent().getEntity(entityKey)\n    return entity ? entity.get('type') : null\n  }\n\n  return null\n\n}\n\nexport const getSelectionEntityData = (editorState, type) => {\n\n  const entityKey = getSelectionEntity(editorState)\n\n  if (entityKey) {\n    const entity = editorState.getCurrentContent().getEntity(entityKey)\n    if (entity && entity.get('type') === type) {\n      return entity.getData()\n    } else {\n      return {}\n    }\n  } else {\n    return {}\n  }\n\n}\n\nexport const toggleSelectionEntity = (editorState, entity) => {\n\n  const contentState = editorState.getCurrentContent()\n  const selectionState = editorState.getSelection()\n\n  if (selectionState.isCollapsed() || getSelectionBlockType(editorState) === 'atomic') {\n    return editorState\n  }\n\n  if (!entity || !entity.type || getSelectionEntityType(editorState) === entity.type) {\n    return EditorState.push(editorState, Modifier.applyEntity(contentState, selectionState, null), 'apply-entity')\n  }\n\n  try {\n\n    const nextContentState = contentState.createEntity(entity.type, entity.mutability, entity.data)\n    const entityKey = nextContentState.getLastCreatedEntityKey()\n\n    let nextEditorState = EditorState.set(editorState, {\n      currentContent: nextContentState\n    })\n\n    return EditorState.push(nextEditorState, Modifier.applyEntity(nextContentState, selectionState, entityKey), 'apply-entity')\n\n  } catch (error) {\n    console.warn(error)\n    return editorState\n  }\n\n}\n\nexport const toggleSelectionLink = (editorState, href, target) => {\n\n  const contentState = editorState.getCurrentContent()\n  const selectionState = editorState.getSelection()\n\n  let entityData = { href, target }\n\n  if (selectionState.isCollapsed() || getSelectionBlockType(editorState) === 'atomic') {\n    return editorState\n  }\n\n  if (href === false) {\n    return RichUtils.toggleLink(editorState, selectionState, null)\n  }\n\n  if (href === null) {\n    delete entityData.href\n  }\n\n  try {\n\n    const nextContentState = contentState.createEntity('LINK', 'MUTABLE', entityData)\n    const entityKey = nextContentState.getLastCreatedEntityKey()\n\n    let nextEditorState = EditorState.set(editorState, {\n      currentContent: nextContentState\n    })\n\n    nextEditorState = RichUtils.toggleLink(nextEditorState, selectionState, entityKey)\n    nextEditorState = EditorState.forceSelection(nextEditorState, selectionState.merge({\n      anchorOffset: selectionState.getEndOffset(), \n      focusOffset: selectionState.getEndOffset()\n    }))\n\n    nextEditorState = EditorState.push(nextEditorState, Modifier.insertText(\n      nextEditorState.getCurrentContent(), nextEditorState.getSelection(), ' '\n    ), 'insert-text')\n\n    return nextEditorState\n\n  } catch (error) {\n    console.warn(error)\n    return editorState\n  }\n\n}\n\nexport const getSelectionInlineStyle = (editorState) => {\n  return editorState.getCurrentInlineStyle()\n}\n\nexport const selectionHasInlineStyle = (editorState, style) => {\n  return getSelectionInlineStyle(editorState).has(style.toUpperCase())\n}\n\nexport const toggleSelectionInlineStyle = (editorState, style, prefix) => {\n\n  const selectionState = editorState.getSelection()\n  const contentState = editorState.getCurrentContent()\n\n  style = style.toUpperCase()\n\n  const stylesToBeRemoved = prefix ? editorState.getCurrentInlineStyle().toJS().filter(item => item.indexOf(prefix) === 0) : []\n\n  let nextEditorState = stylesToBeRemoved.length ? stylesToBeRemoved.reduce((editorState, item) => {\n    // return Modifier.removeInlineStyle(contentState, selectionState, item)\n    return RichUtils.toggleInlineStyle(editorState, item)\n  }, editorState) : editorState\n\n  // const nextEditorState = stylesToBeRemoved.length ? EditorState.push(editorState, nextContentState, 'change-inline-style') : editorState\n  return RichUtils.toggleInlineStyle(nextEditorState, style)\n\n}\n\nexport const removeSelectionInlineStyles = (editorState) => {\n  return removeAllInlineStyles(editorState)\n}\n\nexport const toggleSelectionAlignment = (editorState, alignment) => {\n  return setSelectionBlockData(editorState, {\n    textAlign: getSelectionBlockData(editorState, 'textAlign') !== alignment ? alignment : undefined\n  })\n}\n\nexport const toggleSelectionIndent = (editorState, textIndent, maxIndent = 6) => {\n  return textIndent < 0 || textIndent > maxIndent || isNaN(textIndent) ? editorState : setSelectionBlockData(editorState, {\n    textIndent: textIndent || undefined\n  })\n}\n\nexport const increaseSelectionIndent = (editorState, maxIndent = 6) => {\n  const currentIndent = getSelectionBlockData(editorState, 'textIndent') || 0\n  return toggleSelectionIndent(editorState, currentIndent + 1, maxIndent)\n}\n\nexport const decreaseSelectionIndent = (editorState) => {\n  const currentIndent = getSelectionBlockData(editorState, 'textIndent') || 0\n  return toggleSelectionIndent(editorState, currentIndent - 1)\n}\n\nexport const toggleSelectionColor = (editorState, color) => {\n  return toggleSelectionInlineStyle(editorState, color.replace('#', ''), 'COLOR-')\n}\n\nexport const toggleSelectionBackgroundColor = (editorState, color) => {\n    return toggleSelectionInlineStyle(editorState, color.replace('#', ''), 'BGCOLOR-')\n  }\n\nexport const toggleSelectionFontSize = (editorState, fontSize) => {\n  return toggleSelectionInlineStyle(editorState, fontSize, 'FONTSIZE-')\n}\n\nexport const toggleSelectionLineHeight = (editorState, lineHeight) => {\n  return toggleSelectionInlineStyle(editorState,  lineHeight, 'LINEHEIGHT-')\n}\n\nexport const toggleSelectionFontFamily = (editorState, fontFamily) => {\n  return toggleSelectionInlineStyle(editorState, fontFamily, 'FONTFAMILY-')\n}\n\nexport const toggleSelectionLetterSpacing = (editorState, letterSpacing) => {\n  return toggleSelectionInlineStyle(editorState, letterSpacing, 'LETTERSPACING-')\n}\n\nexport const insertText = (editorState, text, inlineStyle, entity) => {\n\n  const selectionState = editorState.getSelection()\n  const currentSelectedBlockType = getSelectionBlockType(editorState)\n\n  if (currentSelectedBlockType === 'atomic') {\n    return editorState\n  }\n\n  let entityKey\n  let contentState = editorState.getCurrentContent()\n\n  if (entity && entity.type) {\n    contentState = contentState.createEntity(entity.type, entity.mutability || 'MUTABLE', entity.data || entityData)\n    entityKey = contentState.getLastCreatedEntityKey()\n  }\n\n  if (!selectionState.isCollapsed()) {\n    return EditorState.push(editorState, Modifier.replaceText(contentState, selectionState, text, inlineStyle, entityKey), 'replace-text')\n  } else {\n    return EditorState.push(editorState, Modifier.insertText(contentState, selectionState, text, inlineStyle, entityKey), 'insert-text')\n  }\n\n}\n\nexport const insertHTML = (editorState, htmlString, source) => {\n\n  if (!htmlString) {\n    return editorState\n  }\n\n  const selectionState = editorState.getSelection()\n  const contentState = editorState.getCurrentContent()\n  const options = editorState.convertOptions || {}\n\n  try {\n\n    const { blockMap } = convertFromRaw(convertHTMLToRaw(htmlString, options, source))\n\n    return EditorState.push(editorState, Modifier.replaceWithFragment(\n      contentState, selectionState, blockMap\n    ), 'insert-fragment')\n\n  } catch (error) {\n    console.warn(error)\n    return editorState\n  }\n\n}\n\nexport const insertAtomicBlock = (editorState, type, immutable = true, data = {}) => {\n\n  const selectionState = editorState.getSelection()\n  const contentState = editorState.getCurrentContent()\n\n  if (!selectionState.isCollapsed() || getSelectionBlockType(editorState) === 'atomic') {\n    return editorState\n  }\n\n  const contentStateWithEntity = contentState.createEntity(type, immutable ? 'IMMUTABLE' : 'MUTABLE', data)\n  const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n  const newEditorState = AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ')\n\n  return newEditorState\n\n}\n\nexport const insertHorizontalLine = (editorState) => {\n  return insertAtomicBlock(editorState, 'HR')\n}\n\nexport const insertMedias = (editorState, medias = []) => {\n\n  if (!medias.length) {\n    return editorState\n  }\n\n  if (getSelectionBlockType(editorState) === 'atomic') { \n    selectNextBlock(editorState, getSelectionBlock(editorState))\n  }\n\n  return medias.reduce((editorState, media) => {\n    const { url, name, type, meta } = media\n    const contentStateWithEntity = editorState.getCurrentContent().createEntity(type, 'IMMUTABLE', { url, name, type, meta })\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n    return AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ')\n  }, editorState)\n\n}\n\nexport const setMediaData = (editorState, entityKey, data) => {\n  return EditorState.push(editorState, editorState.getCurrentContent().mergeEntityData(entityKey, data), 'change-block-data')\n}\n\nexport const removeMedia = (editorState, mediaBlock) => {\n  return removeBlock(editorState, mediaBlock)\n}\n\nexport const setMediaPosition = (editorState, mediaBlock, position) => {\n\n  let newPosition = {}\n  const { float, alignment } = position\n\n  if (typeof float !== 'undefined') {\n    newPosition.float = mediaBlock.getData().get('float') === float ? null : float\n  }\n\n  if (typeof alignment !== 'undefined') {\n    newPosition.alignment = mediaBlock.getData().get('alignment') === alignment ? null : alignment\n  }\n\n  return setSelectionBlockData(selectBlock(editorState, mediaBlock), newPosition)\n\n}\n\nexport const clear = (editorState) => {\n\n  const contentState = editorState.getCurrentContent()\n\n  const firstBlock = contentState.getFirstBlock()\n  const lastBlock = contentState.getLastBlock()\n\n  const allSelected = new SelectionState({\n    anchorKey: firstBlock.getKey(),\n    anchorOffset: 0,\n    focusKey: lastBlock.getKey(),\n    focusOffset: lastBlock.getLength(),\n    hasFocus: true\n  })\n\n  return EditorState.push(\n    editorState,\n    Modifier.removeRange(contentState, allSelected, 'backward'),\n    'remove-range'\n  )\n\n}\n\nexport const handleKeyCommand = (editorState, command) => {\n  return RichUtils.handleKeyCommand(editorState, command)\n}\n\nexport const undo = (editorState) => {\n  return EditorState.undo(editorState)\n}\n\nexport const redo = (editorState) => {\n  return EditorState.redo(editorState)\n}"]}