{"version":3,"sources":["../src/content.js"],"names":["isEditorState","editorState","EditorState","createEmptyEditorState","editorDecorators","createEmpty","createEditorState","contentState","createWithContent","isSelectionCollapsed","getSelection","isCollapsed","selectBlock","block","blockKey","getKey","forceSelection","SelectionState","anchorKey","anchorOffset","focusKey","focusOffset","getLength","selectNextBlock","nextBlock","getCurrentContent","getBlockAfter","removeBlock","lastSelection","nextContentState","nextEditorState","Modifier","removeRange","setBlockType","getSelectionAfter","push","getSelectionBlock","getBlockForKey","getAnchorKey","setSelectionBlockData","blockData","override","allBlockData","getSelectionBlockData","toJS","Object","assign","name","getData","get","getSelectionBlockType","getType","getSelectionText","selectionState","currentContentBlock","start","getStartOffset","end","getEndOffset","getText","slice","toggleSelectionBlockType","blockType","RichUtils","toggleBlockType","getSelectionEntityData","type","entityKey","entity","getEntity","href","target","getSelectionInlineStyle","getCurrentInlineStyle","selectionHasInlineStyle","style","has","toUpperCase","toggleSelectionInlineStyle","stylesToBeRemoved","filter","item","length","reduce","removeInlineStyle","toggleInlineStyle","removeSelectionInlineStyles","toggleSelectionAlignment","alignment","textAlign","undefined","toggleSelectionIndent","indent","max","textIndent","isNaN","toggleSelectionColor","color","colorList","replace","map","toggleSelectionBackgroundColor","toggleSelectionFontSize","fontSize","fontSizeList","toggleSelectionLineHeight","lineHeight","lineHeightList","toggleSelectionFontFamily","fontFamily","fontFamilyList","toggleSelectionLetterSpacing","letterSpacing","letterSpacingList","toggleSelectionLink","entityData","toggleLink","createEntity","getLastCreatedEntityKey","set","currentContent","merge","insertText","error","console","warn","text","currentSelectedBlockType","replaceText","insertHTML","htmlString","blockMap","replaceWithFragment","insertAtomicBlock","immutable","data","contentStateWithEntity","newEditorState","AtomicBlockUtils","insertHorizontalLine","insertMedias","medias","media","url","meta","setMediaData","mergeEntityData","removeMedia","mediaBlock","setMediaPosition","position","newPosition","float","clear","firstBlock","getFirstBlock","lastBlock","getLastBlock","allSelected","hasFocus","handleKeyCommand","command","handleNewLine","event","undo","redo"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;kBAEe;AAEbA,eAFa,yBAEEC,WAFF,EAEe;AAC1B,WAAOA,uBAAuBC,oBAA9B;AACD,GAJY;AAMbC,wBANa,kCAMWC,gBANX,EAM6B;AACxC,WAAOF,qBAAYG,WAAZ,CAAwBD,gBAAxB,CAAP;AACD,GARY;AAUbE,mBAVa,6BAUMC,YAVN,EAUoBH,gBAVpB,EAUsC;AACjD,WAAOF,qBAAYM,iBAAZ,CAA8BD,YAA9B,EAA4CH,gBAA5C,CAAP;AACD,GAZY;AAcbK,sBAda,gCAcSR,WAdT,EAcsB;AACjC,WAAOA,YAAYS,YAAZ,GAA2BC,WAA3B,EAAP;AACD,GAhBY;AAkBbC,aAlBa,uBAkBAX,WAlBA,EAkBaY,KAlBb,EAkBoB;;AAE/B,QAAMC,WAAWD,MAAME,MAAN,EAAjB;;AAEA,WAAOb,qBAAYc,cAAZ,CAA2Bf,WAA3B,EAAwC,IAAIgB,uBAAJ,CAAmB;AAChEC,iBAAWJ,QADqD;AAEhEK,oBAAc,CAFkD;AAGhEC,gBAAUN,QAHsD;AAIhEO,mBAAaR,MAAMS,SAAN;AAJmD,KAAnB,CAAxC,CAAP;AAOD,GA7BY;AA+BbC,iBA/Ba,2BA+BItB,WA/BJ,EA+BiBY,KA/BjB,EA+BwB;AACnC,QAAMW,YAAYvB,YAAYwB,iBAAZ,GAAgCC,aAAhC,CAA8Cb,MAAME,MAAN,EAA9C,CAAlB;AACA,WAAOS,YAAY,KAAKZ,WAAL,CAAiBX,WAAjB,EAA8BuB,SAA9B,CAAZ,GAAuDvB,WAA9D;AACD,GAlCY;AAoCb0B,aApCa,uBAoCA1B,WApCA,EAoCaY,KApCb,EAoC0C;AAAA,QAAtBe,aAAsB,uEAAN,IAAM;;;AAErD,QAAIC,yBAAJ;AAAA,QAAsBC,wBAAtB;AACA,QAAMhB,WAAWD,MAAME,MAAN,EAAjB;;AAEAc,uBAAmBE,kBAASC,WAAT,CAAqB/B,YAAYwB,iBAAZ,EAArB,EAAsD,IAAIR,uBAAJ,CAAmB;AAC1FC,iBAAWJ,QAD+E;AAE1FK,oBAAc,CAF4E;AAG1FC,gBAAUN,QAHgF;AAI1FO,mBAAaR,MAAMS,SAAN;AAJ6E,KAAnB,CAAtD,EAKf,UALe,CAAnB;;AAOAO,uBAAmBE,kBAASE,YAAT,CAAsBJ,gBAAtB,EAAwCA,iBAAiBK,iBAAjB,EAAxC,EAA8E,UAA9E,CAAnB;AACAJ,sBAAkB5B,qBAAYiC,IAAZ,CAAiBlC,WAAjB,EAA8B4B,gBAA9B,EAAgD,cAAhD,CAAlB;AACA,WAAO3B,qBAAYc,cAAZ,CAA2Bc,eAA3B,EAA4CF,iBAAiBC,iBAAiBK,iBAAjB,EAA7D,CAAP;AAED,GApDY;AAsDbE,mBAtDa,6BAsDMnC,WAtDN,EAsDmB;AAC9B,WAAOA,YAAYwB,iBAAZ,GAAgCY,cAAhC,CAA+CpC,YAAYS,YAAZ,GAA2B4B,YAA3B,EAA/C,CAAP;AACD,GAxDY;AA0DbC,uBA1Da,iCA0DUtC,WA1DV,EA0DuBuC,SA1DvB,EA0DkCC,QA1DlC,EA0D4C;;AAEvD,QAAIA,QAAJ,EAAc;AACZ,aAAO,gCAAaxC,WAAb,EAA0BuC,SAA1B,CAAP;AACD,KAFD,MAEO;AACL,UAAME,eAAe,KAAKC,qBAAL,CAA2B1C,WAA3B,EAAwC2C,IAAxC,EAArB;AACA,aAAO,gCAAa3C,WAAb,EAA0B4C,OAAOC,MAAP,CAAc,EAAd,EAAkBJ,YAAlB,EAAgCF,SAAhC,CAA1B,CAAP;AACD;AAEF,GAnEY;AAqEbG,uBArEa,iCAqEU1C,WArEV,EAqEuB8C,IArEvB,EAqE6B;AACxC,QAAMP,YAAY,KAAKJ,iBAAL,CAAuBnC,WAAvB,EAAoC+C,OAApC,EAAlB;AACA,WAAOD,OAAOP,UAAUS,GAAV,CAAcF,IAAd,CAAP,GAA6BP,SAApC;AACD,GAxEY;AA0EbU,uBA1Ea,iCA0EUjD,WA1EV,EA0EuB;AAClC,WAAO,KAAKmC,iBAAL,CAAuBnC,WAAvB,EAAoCkD,OAApC,EAAP;AACD,GA5EY;AA8EbC,kBA9Ea,4BA8EKnD,WA9EL,EA8EkB;;AAE7B,QAAMoD,iBAAiBpD,YAAYS,YAAZ,EAAvB;AACA,QAAMH,eAAeN,YAAYwB,iBAAZ,EAArB;;AAEA,QAAI4B,eAAe1C,WAAf,MAAgC,KAAKuC,qBAAL,CAA2BjD,WAA3B,MAA4C,QAAhF,EAA0F;AACxF,aAAO,EAAP;AACD;;AAED,QAAMiB,YAAYmC,eAAef,YAAf,EAAlB;AACA,QAAMgB,sBAAsB/C,aAAa8B,cAAb,CAA4BnB,SAA5B,CAA5B;AACA,QAAMqC,QAAQF,eAAeG,cAAf,EAAd;AACA,QAAMC,MAAMJ,eAAeK,YAAf,EAAZ;;AAEA,WAAOJ,oBAAoBK,OAApB,GAA8BC,KAA9B,CAAoCL,KAApC,EAA2CE,GAA3C,CAAP;AAED,GA9FY;AAgGbI,0BAhGa,oCAgGa5D,WAhGb,EAgG0B6D,SAhG1B,EAgGqC;AAChD,WAAOC,mBAAUC,eAAV,CAA0B/D,WAA1B,EAAuC6D,SAAvC,CAAP;AACD,GAlGY;AAoGbG,wBApGa,kCAoGWhE,WApGX,EAoGwBiE,IApGxB,EAoG8B;;AAEzC,QAAMC,YAAY,sCAAmBlE,WAAnB,CAAlB;;AAEA,QAAIkE,SAAJ,EAAe;AACb,UAAIC,SAASnE,YAAYwB,iBAAZ,GAAgC4C,SAAhC,CAA0CF,SAA1C,CAAb;AACA,UAAIC,UAAUA,OAAOnB,GAAP,CAAW,MAAX,MAAuBiB,IAArC,EAA2C;AAAA,8BAClBE,OAAOpB,OAAP,EADkB;AAAA,YACnCsB,IADmC,mBACnCA,IADmC;AAAA,YAC7BC,MAD6B,mBAC7BA,MAD6B;;AAEzC,eAAO,EAAED,UAAF,EAAQC,cAAR,EAAP;AACD,OAHD,MAGO;AACL,eAAO,EAAP;AACD;AACF,KARD,MAQO;AACL,aAAO,EAAP;AACD;AAEF,GApHY;AAsHbC,yBAtHa,mCAsHYvE,WAtHZ,EAsHyB;AACpC,WAAOA,YAAYwE,qBAAZ,EAAP;AACD,GAxHY;AA0HbC,yBA1Ha,mCA0HYzE,WA1HZ,EA0HyB0E,KA1HzB,EA0HgC;AAC3C,WAAO,KAAKH,uBAAL,CAA6BvE,WAA7B,EAA0C2E,GAA1C,CAA8CD,MAAME,WAAN,EAA9C,CAAP;AACD,GA5HY;AA8HbC,4BA9Ha,sCA8He7E,WA9Hf,EA8H4B0E,KA9H5B,EA8H2D;AAAA,QAAxBI,iBAAwB,uEAAJ,EAAI;;;AAEtE,QAAM1B,iBAAiBpD,YAAYS,YAAZ,EAAvB;AACA,QAAMH,eAAeN,YAAYwB,iBAAZ,EAArB;;AAEAkD,YAAQA,MAAME,WAAN,EAAR;AACAE,wBAAoBA,kBAAkBC,MAAlB,CAAyB;AAAA,aAAQC,SAASN,KAAjB;AAAA,KAAzB,CAApB;;AAEA,QAAM9C,mBAAmBkD,kBAAkBG,MAAlB,GAA2BH,kBAAkBI,MAAlB,CAAyB,UAAC5E,YAAD,EAAe0E,IAAf,EAAwB;AACnG,aAAOlD,kBAASqD,iBAAT,CAA2B7E,YAA3B,EAAyC8C,cAAzC,EAAyD4B,IAAzD,CAAP;AACD,KAFmD,EAEjD1E,YAFiD,CAA3B,GAENA,YAFnB;;AAIA,QAAMuB,kBAAkBiD,kBAAkBG,MAAlB,GAA2BhF,qBAAYiC,IAAZ,CAAiBlC,WAAjB,EAA8B4B,gBAA9B,EAAgD,qBAAhD,CAA3B,GAAoG5B,WAA5H;AACA,WAAO8D,mBAAUsB,iBAAV,CAA4BvD,eAA5B,EAA6C6C,KAA7C,CAAP;AAED,GA7IY;AA+IbW,6BA/Ia,uCA+IgBrF,WA/IhB,EA+I6B;AACxC,WAAO,yCAAsBA,WAAtB,CAAP;AACD,GAjJY;AAmJbsF,0BAnJa,oCAmJatF,WAnJb,EAmJ0BuF,SAnJ1B,EAmJqC;AAChD,WAAO,KAAKjD,qBAAL,CAA2BtC,WAA3B,EAAwC;AAC7CwF,iBAAW,KAAK9C,qBAAL,CAA2B1C,WAA3B,EAAwC,WAAxC,MAAyDuF,SAAzD,GAAqEA,SAArE,GAAiFE;AAD/C,KAAxC,CAAP;AAGD,GAvJY;AAyJbC,uBAzJa,iCAyJU1F,WAzJV,EAyJuB2F,MAzJvB,EAyJwC;AAAA,QAATC,GAAS,uEAAH,CAAG;;AACnD,WAAO,KAAKtD,qBAAL,CAA2BtC,WAA3B,EAAwC;AAC7C6F,kBAAYF,UAAU,CAAV,IAAeA,SAASC,GAAxB,IAA+BE,MAAMH,MAAN,CAA/B,GAA+CF,SAA/C,GAA2DE;AAD1B,KAAxC,CAAP;AAGD,GA7JY;AA+JbI,sBA/Ja,gCA+JS/F,WA/JT,EA+JsBgG,KA/JtB,EA+J6C;AAAA,QAAhBC,SAAgB,uEAAJ,EAAI;;AACxD,WAAO,KAAKpB,0BAAL,CAAgC7E,WAAhC,EAA6C,WAAWgG,MAAME,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAxD,EAAgFD,UAAUE,GAAV,CAAc;AAAA,aAAQ,WAAWnB,KAAKkB,OAAL,CAAa,GAAb,EAAkB,EAAlB,EAAsBtB,WAAtB,EAAnB;AAAA,KAAd,CAAhF,CAAP;AACD,GAjKY;AAmKbwB,gCAnKa,0CAmKmBpG,WAnKnB,EAmKgCgG,KAnKhC,EAmKuD;AAAA,QAAhBC,SAAgB,uEAAJ,EAAI;;AAClE,WAAO,KAAKpB,0BAAL,CAAgC7E,WAAhC,EAA6C,aAAagG,MAAME,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAA1D,EAAkFD,UAAUE,GAAV,CAAc;AAAA,aAAQ,aAAanB,KAAKkB,OAAL,CAAa,GAAb,EAAkB,EAAlB,EAAsBtB,WAAtB,EAArB;AAAA,KAAd,CAAlF,CAAP;AACD,GArKY;AAuKbyB,yBAvKa,mCAuKYrG,WAvKZ,EAuKyBsG,QAvKzB,EAuKsD;AAAA,QAAnBC,YAAmB,uEAAJ,EAAI;;AACjE,WAAO,KAAK1B,0BAAL,CAAgC7E,WAAhC,EAA6C,cAAcsG,QAA3D,EAAqEC,aAAaJ,GAAb,CAAiB;AAAA,aAAQ,cAAcnB,IAAtB;AAAA,KAAjB,CAArE,CAAP;AACD,GAzKY;AA2KbwB,2BA3Ka,qCA2KcxG,WA3Kd,EA2K2ByG,UA3K3B,EA2K4D;AAAA,QAArBC,cAAqB,uEAAJ,EAAI;;AACvE,WAAO,KAAK7B,0BAAL,CAAgC7E,WAAhC,EAA6C,gBAAgByG,UAA7D,EAAyEC,eAAeP,GAAf,CAAmB;AAAA,aAAQ,gBAAgBnB,IAAxB;AAAA,KAAnB,CAAzE,CAAP;AACD,GA7KY;AA+Kb2B,2BA/Ka,qCA+Kc3G,WA/Kd,EA+K2B4G,UA/K3B,EA+K4D;AAAA,QAArBC,cAAqB,uEAAJ,EAAI;;AACvE,WAAO,KAAKhC,0BAAL,CAAgC7E,WAAhC,EAA6C,gBAAgB4G,UAA7D,EAAyEC,eAAeV,GAAf,CAAmB;AAAA,aAAQ,gBAAgBnB,KAAKlC,IAAL,CAAU8B,WAAV,EAAxB;AAAA,KAAnB,CAAzE,CAAP;AACD,GAjLY;AAmLbkC,8BAnLa,wCAmLiB9G,WAnLjB,EAmL8B+G,aAnL9B,EAmLqE;AAAA,QAAxBC,iBAAwB,uEAAJ,EAAI;;AAChF,WAAO,KAAKnC,0BAAL,CAAgC7E,WAAhC,EAA6C,mBAAmB+G,aAAhE,EAA+EC,kBAAkBb,GAAlB,CAAsB;AAAA,aAAQ,mBAAmBnB,IAA3B;AAAA,KAAtB,CAA/E,CAAP;AACD,GArLY;AAuLbiC,qBAvLa,+BAuLQjH,WAvLR,EAuLqBqE,IAvLrB,EAuL2BC,MAvL3B,EAuLmC;;AAE9C,QAAMlB,iBAAiBpD,YAAYS,YAAZ,EAAvB;AACA,QAAMH,eAAeN,YAAYwB,iBAAZ,EAArB;;AAEA,QAAI0F,aAAa,EAAE7C,UAAF,EAAQC,cAAR,EAAjB;;AAEA,QAAIlB,eAAe1C,WAAf,MAAgC,KAAKuC,qBAAL,CAA2BjD,WAA3B,MAA4C,QAAhF,EAA0F;AACxF,aAAOA,WAAP;AACD;;AAED,QAAIqE,SAAS,KAAb,EAAoB;AAClB,aAAOP,mBAAUqD,UAAV,CAAqBnH,WAArB,EAAkCoD,cAAlC,EAAkD,IAAlD,CAAP;AACD;;AAED,QAAIiB,SAAS,IAAb,EAAmB;AACjB,aAAO6C,WAAW7C,IAAlB;AACD;;AAED,QAAI;;AAEF,UAAMzC,mBAAmBtB,aAAa8G,YAAb,CAA0B,MAA1B,EAAkC,SAAlC,EAA6CF,UAA7C,CAAzB;AACA,UAAMhD,YAAYtC,iBAAiByF,uBAAjB,EAAlB;;AAEA,UAAIxF,kBAAkB5B,qBAAYqH,GAAZ,CAAgBtH,WAAhB,EAA6B;AACjDuH,wBAAgB3F;AADiC,OAA7B,CAAtB;;AAIAC,wBAAkBiC,mBAAUqD,UAAV,CAAqBtF,eAArB,EAAsCuB,cAAtC,EAAsDc,SAAtD,CAAlB;AACArC,wBAAkB5B,qBAAYc,cAAZ,CAA2Bc,eAA3B,EAA4CuB,eAAeoE,KAAf,CAAqB;AACjFtG,sBAAckC,eAAeK,YAAf,EADmE;AAEjFrC,qBAAagC,eAAeK,YAAf;AAFoE,OAArB,CAA5C,CAAlB;;AAKA5B,wBAAkB5B,qBAAYiC,IAAZ,CAAiBL,eAAjB,EAAkCC,kBAAS2F,UAAT,CAClD5F,gBAAgBL,iBAAhB,EADkD,EACbK,gBAAgBpB,YAAhB,EADa,EACmB,GADnB,CAAlC,EAEf,aAFe,CAAlB;;AAIA,aAAOoB,eAAP;AAED,KArBD,CAqBE,OAAO6F,KAAP,EAAc;AACdC,cAAQC,IAAR,CAAaF,KAAb;AACA,aAAO1H,WAAP;AACD;AAEF,GApOY;AAsObyH,YAtOa,sBAsODzH,WAtOC,EAsOY6H,IAtOZ,EAsOkC;AAAA,QAAhB3B,OAAgB,uEAAN,IAAM;;;AAE7C,QAAM9C,iBAAiBpD,YAAYS,YAAZ,EAAvB;AACA,QAAMH,eAAeN,YAAYwB,iBAAZ,EAArB;AACA,QAAMsG,2BAA2B,KAAK7E,qBAAL,CAA2BjD,WAA3B,CAAjC;;AAEA,QAAI8H,6BAA6B,QAAjC,EAA2C;AACzC,aAAO9H,WAAP;AACD;;AAED,QAAI,CAACoD,eAAe1C,WAAf,EAAL,EAAmC;AACjC,aAAOwF,UAAUjG,qBAAYiC,IAAZ,CAAiBlC,WAAjB,EAA8B8B,kBAASiG,WAAT,CAC7CzH,YAD6C,EAC/B8C,cAD+B,EACfyE,IADe,CAA9B,EAEd,cAFc,CAAV,GAEc7H,WAFrB;AAGD,KAJD,MAIO;AACL,aAAOC,qBAAYiC,IAAZ,CAAiBlC,WAAjB,EAA8B8B,kBAAS2F,UAAT,CACnCnH,YADmC,EACrB8C,cADqB,EACLyE,IADK,CAA9B,EAEJ,aAFI,CAAP;AAGD;AAEF,GA1PY;AA4PbG,YA5Pa,sBA4PDhI,WA5PC,EA4PYiI,UA5PZ,EA4PwB;;AAEnC,QAAI,CAACA,UAAL,EAAiB;AACf,aAAOjI,WAAP;AACD;;AAED,QAAMoD,iBAAiBpD,YAAYS,YAAZ,EAAvB;AACA,QAAMH,eAAeN,YAAYwB,iBAAZ,EAArB;;AAEA,QAAI;AAAA,4BAEmB,6BAAe,oCAAiByG,UAAjB,CAAf,CAFnB;AAAA,UAEMC,QAFN,mBAEMA,QAFN;;AAIF,aAAOjI,qBAAYiC,IAAZ,CAAiBlC,WAAjB,EAA8B8B,kBAASqG,mBAAT,CACnC7H,YADmC,EACrB8C,cADqB,EACL8E,QADK,CAA9B,EAEJ,iBAFI,CAAP;AAID,KARD,CAQE,OAAOR,KAAP,EAAc;AACdC,cAAQC,IAAR,CAAaF,KAAb;AACA,aAAO1H,WAAP;AACD;AAEF,GAlRY;AAoRboI,mBApRa,6BAoRMpI,WApRN,EAoRmBiE,IApRnB,EAoRsD;AAAA,QAA7BoE,SAA6B,uEAAjB,IAAiB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;;AAEjE,QAAMlF,iBAAiBpD,YAAYS,YAAZ,EAAvB;AACA,QAAMH,eAAeN,YAAYwB,iBAAZ,EAArB;;AAEA,QAAI,CAAC4B,eAAe1C,WAAf,EAAD,IAAiC,KAAKuC,qBAAL,CAA2BjD,WAA3B,MAA4C,QAAjF,EAA2F;AACzF,aAAOA,WAAP;AACD;;AAED,QAAMuI,yBAAyBjI,aAAa8G,YAAb,CAA0BnD,IAA1B,EAAgCoE,YAAY,WAAZ,GAA0B,SAA1D,EAAqEC,IAArE,CAA/B;AACA,QAAMpE,YAAYqE,uBAAuBlB,uBAAvB,EAAlB;AACA,QAAMmB,iBAAiBC,0BAAiBL,iBAAjB,CAAmCpI,WAAnC,EAAgDkE,SAAhD,EAA2D,GAA3D,CAAvB;;AAEA,WAAOsE,cAAP;AAED,GAnSY;AAqSbE,sBArSa,gCAqSS1I,WArST,EAqSsB;AACjC,WAAO,KAAKoI,iBAAL,CAAuBpI,WAAvB,EAAoC,IAApC,CAAP;AACD,GAvSY;AAySb2I,cAzSa,wBAySC3I,WAzSD,EAyS2B;AAAA,QAAb4I,MAAa,uEAAJ,EAAI;;;AAEtC,QAAI,CAACA,OAAO3D,MAAZ,EAAoB;AAClB,aAAOjF,WAAP;AACD;;AAED,QAAI,KAAKiD,qBAAL,CAA2BjD,WAA3B,MAA4C,QAAhD,EAA0D;AACxD,WAAKsB,eAAL,CAAqBtB,WAArB,EAAkC,KAAKmC,iBAAL,CAAuBnC,WAAvB,CAAlC;AACD;;AAED,WAAO4I,OAAO1D,MAAP,CAAc,UAAClF,WAAD,EAAc6I,KAAd,EAAwB;AAAA,UACnCC,GADmC,GACTD,KADS,CACnCC,GADmC;AAAA,UAC9BhG,IAD8B,GACT+F,KADS,CAC9B/F,IAD8B;AAAA,UACxBmB,IADwB,GACT4E,KADS,CACxB5E,IADwB;AAAA,UAClB8E,IADkB,GACTF,KADS,CAClBE,IADkB;;AAE3C,UAAMR,yBAAyBvI,YAAYwB,iBAAZ,GAAgC4F,YAAhC,CAA6CnD,IAA7C,EAAmD,WAAnD,EAAgE,EAAE6E,QAAF,EAAOhG,UAAP,EAAamB,UAAb,EAAmB8E,UAAnB,EAAhE,CAA/B;AACA,UAAM7E,YAAYqE,uBAAuBlB,uBAAvB,EAAlB;AACA,aAAOoB,0BAAiBL,iBAAjB,CAAmCpI,WAAnC,EAAgDkE,SAAhD,EAA2D,GAA3D,CAAP;AACD,KALM,EAKJlE,WALI,CAAP;AAOD,GA1TY;AA4TbgJ,cA5Ta,wBA4TChJ,WA5TD,EA4TckE,SA5Td,EA4TyBoE,IA5TzB,EA4T+B;AAC1C,WAAOrI,qBAAYiC,IAAZ,CAAiBlC,WAAjB,EAA8BA,YAAYwB,iBAAZ,GAAgCyH,eAAhC,CAAgD/E,SAAhD,EAA2DoE,IAA3D,CAA9B,EAAgG,mBAAhG,CAAP;AACD,GA9TY;AAgUbY,aAhUa,uBAgUAlJ,WAhUA,EAgUamJ,UAhUb,EAgUyB;AACpC,WAAO,KAAKzH,WAAL,CAAiB1B,WAAjB,EAA8BmJ,UAA9B,CAAP;AACD,GAlUY;AAoUbC,kBApUa,4BAoUKpJ,WApUL,EAoUkBmJ,UApUlB,EAoU8BE,QApU9B,EAoUwC;;AAEnD,QAAIC,cAAc,EAAlB;AAFmD,QAG3CC,KAH2C,GAGtBF,QAHsB,CAG3CE,KAH2C;AAAA,QAGpChE,SAHoC,GAGtB8D,QAHsB,CAGpC9D,SAHoC;;;AAKnD,QAAI,OAAOgE,KAAP,KAAiB,WAArB,EAAkC;AAChCD,kBAAYC,KAAZ,GAAoBJ,WAAWpG,OAAX,GAAqBC,GAArB,CAAyB,OAAzB,MAAsCuG,KAAtC,GAA8C,IAA9C,GAAqDA,KAAzE;AACD;;AAED,QAAI,OAAOhE,SAAP,KAAqB,WAAzB,EAAsC;AACpC+D,kBAAY/D,SAAZ,GAAwB4D,WAAWpG,OAAX,GAAqBC,GAArB,CAAyB,WAAzB,MAA0CuC,SAA1C,GAAsD,IAAtD,GAA6DA,SAArF;AACD;;AAED,WAAO,KAAKjD,qBAAL,CAA2B,KAAK3B,WAAL,CAAiBX,WAAjB,EAA8BmJ,UAA9B,CAA3B,EAAsEG,WAAtE,CAAP;AAED,GAnVY;AAqVbE,OArVa,iBAqVNxJ,WArVM,EAqVO;;AAElB,QAAMM,eAAeN,YAAYwB,iBAAZ,EAArB;;AAEA,QAAMiI,aAAanJ,aAAaoJ,aAAb,EAAnB;AACA,QAAMC,YAAYrJ,aAAasJ,YAAb,EAAlB;;AAEA,QAAMC,cAAc,IAAI7I,uBAAJ,CAAmB;AACrCC,iBAAWwI,WAAW3I,MAAX,EAD0B;AAErCI,oBAAc,CAFuB;AAGrCC,gBAAUwI,UAAU7I,MAAV,EAH2B;AAIrCM,mBAAauI,UAAUtI,SAAV,EAJwB;AAKrCyI,gBAAU;AAL2B,KAAnB,CAApB;;AAQA,WAAO7J,qBAAYiC,IAAZ,CACLlC,WADK,EAEL8B,kBAASC,WAAT,CAAqBzB,YAArB,EAAmCuJ,WAAnC,EAAgD,UAAhD,CAFK,EAGL,cAHK,CAAP;AAMD,GA1WY;AA4WbE,kBA5Wa,4BA4WK/J,WA5WL,EA4WkBgK,OA5WlB,EA4W2B;AACtC,WAAOlG,mBAAUiG,gBAAV,CAA2B/J,WAA3B,EAAwCgK,OAAxC,CAAP;AACD,GA9WY;AAgXbC,eAhXa,yBAgXEjK,WAhXF,EAgXekK,KAhXf,EAgXsB;AACjC,WAAO,iCAAclK,WAAd,EAA2BkK,KAA3B,CAAP;AACD,GAlXY;AAoXbC,MApXa,gBAoXPnK,WApXO,EAoXM;AACjB,WAAOC,qBAAYkK,IAAZ,CAAiBnK,WAAjB,CAAP;AACD,GAtXY;AAwXboK,MAxXa,gBAwXPpK,WAxXO,EAwXM;AACjB,WAAOC,qBAAYmK,IAAZ,CAAiBpK,WAAjB,CAAP;AACD;AA1XY,C","file":"content.js","sourcesContent":["import { Modifier, EditorState, SelectionState, RichUtils, AtomicBlockUtils, convertFromRaw } from 'draft-js'\nimport { setBlockData, getSelectionEntity, removeAllInlineStyles, handleNewLine } from 'draftjs-utils'\nimport { detectColorsFromHTMLString, detectColorsFromDraftState } from './color'\nimport { convertHTMLToRaw } from 'braft-convert'\n\nexport default {\n\n  isEditorState (editorState) {\n    return editorState instanceof EditorState\n  },\n\n  createEmptyEditorState (editorDecorators) {\n    return EditorState.createEmpty(editorDecorators)\n  },\n\n  createEditorState (contentState, editorDecorators) {\n    return EditorState.createWithContent(contentState, editorDecorators)\n  },\n\n  isSelectionCollapsed (editorState) {\n    return editorState.getSelection().isCollapsed()\n  },\n\n  selectBlock (editorState, block) {\n\n    const blockKey = block.getKey()\n\n    return EditorState.forceSelection(editorState, new SelectionState({\n      anchorKey: blockKey,\n      anchorOffset: 0,\n      focusKey: blockKey,\n      focusOffset: block.getLength()\n    }))\n\n  },\n\n  selectNextBlock (editorState, block) {\n    const nextBlock = editorState.getCurrentContent().getBlockAfter(block.getKey())\n    return nextBlock ? this.selectBlock(editorState, nextBlock) : editorState\n  },\n\n  removeBlock (editorState, block, lastSelection = null) {\n\n    let nextContentState, nextEditorState\n    const blockKey = block.getKey()\n\n    nextContentState = Modifier.removeRange(editorState.getCurrentContent(), new SelectionState({\n      anchorKey: blockKey,\n      anchorOffset: 0,\n      focusKey: blockKey,\n      focusOffset: block.getLength()\n    }), 'backward')\n\n    nextContentState = Modifier.setBlockType(nextContentState, nextContentState.getSelectionAfter(), 'unstyled')\n    nextEditorState = EditorState.push(editorState, nextContentState, 'remove-range')\n    return EditorState.forceSelection(nextEditorState, lastSelection || nextContentState.getSelectionAfter())\n\n  },\n\n  getSelectionBlock (editorState) {\n    return editorState.getCurrentContent().getBlockForKey(editorState.getSelection().getAnchorKey())\n  },\n\n  setSelectionBlockData (editorState, blockData, override) {\n\n    if (override) {\n      return setBlockData(editorState, blockData)\n    } else {\n      const allBlockData = this.getSelectionBlockData(editorState).toJS()\n      return setBlockData(editorState, Object.assign({}, allBlockData, blockData))\n    }\n\n  },\n\n  getSelectionBlockData (editorState, name) {\n    const blockData = this.getSelectionBlock(editorState).getData()\n    return name ? blockData.get(name) : blockData\n  },\n\n  getSelectionBlockType (editorState) {\n    return this.getSelectionBlock(editorState).getType()\n  },\n\n  getSelectionText (editorState) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    if (selectionState.isCollapsed() || this.getSelectionBlockType(editorState) === 'atomic') {\n      return ''\n    }\n\n    const anchorKey = selectionState.getAnchorKey()\n    const currentContentBlock = contentState.getBlockForKey(anchorKey)\n    const start = selectionState.getStartOffset()\n    const end = selectionState.getEndOffset()\n\n    return currentContentBlock.getText().slice(start, end);\n\n  },\n\n  toggleSelectionBlockType (editorState, blockType) {\n    return RichUtils.toggleBlockType(editorState, blockType)\n  },\n\n  getSelectionEntityData (editorState, type) {\n\n    const entityKey = getSelectionEntity(editorState)\n\n    if (entityKey) {\n      let entity = editorState.getCurrentContent().getEntity(entityKey)\n      if (entity && entity.get('type') === type) {\n        let { href, target } = entity.getData()\n        return { href, target }\n      } else {\n        return {}\n      }\n    } else {\n      return {}\n    }\n\n  },\n\n  getSelectionInlineStyle (editorState) {\n    return editorState.getCurrentInlineStyle()\n  },\n\n  selectionHasInlineStyle (editorState, style) {\n    return this.getSelectionInlineStyle(editorState).has(style.toUpperCase())\n  },\n\n  toggleSelectionInlineStyle (editorState, style, stylesToBeRemoved = []) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    style = style.toUpperCase()\n    stylesToBeRemoved = stylesToBeRemoved.filter(item => item !== style)\n\n    const nextContentState = stylesToBeRemoved.length ? stylesToBeRemoved.reduce((contentState, item) => {\n      return Modifier.removeInlineStyle(contentState, selectionState, item) \n    }, contentState) : contentState\n\n    const nextEditorState = stylesToBeRemoved.length ? EditorState.push(editorState, nextContentState, 'change-inline-style') : editorState\n    return RichUtils.toggleInlineStyle(nextEditorState, style)\n\n  },\n\n  removeSelectionInlineStyles (editorState) {\n    return removeAllInlineStyles(editorState)\n  },\n\n  toggleSelectionAlignment (editorState, alignment) {\n    return this.setSelectionBlockData(editorState, {\n      textAlign: this.getSelectionBlockData(editorState, 'textAlign') !== alignment ? alignment : undefined\n    })\n  },\n\n  toggleSelectionIndent (editorState, indent, max = 6) {\n    return this.setSelectionBlockData(editorState, {\n      textIndent: indent <= 0 || indent > max || isNaN(indent) ? undefined : indent\n    })\n  },\n\n  toggleSelectionColor (editorState, color, colorList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'COLOR-' + color.replace('#', ''), colorList.map(item => 'COLOR-' + item.replace('#', '').toUpperCase()))\n  },\n\n  toggleSelectionBackgroundColor (editorState, color, colorList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'BGCOLOR-' + color.replace('#', ''), colorList.map(item => 'BGCOLOR-' + item.replace('#', '').toUpperCase()))\n  },\n\n  toggleSelectionFontSize (editorState, fontSize, fontSizeList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'FONTSIZE-' + fontSize, fontSizeList.map(item => 'FONTSIZE-' + item))\n  },\n\n  toggleSelectionLineHeight (editorState, lineHeight, lineHeightList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'LINEHEIGHT-' + lineHeight, lineHeightList.map(item => 'LINEHEIGHT-' + item))\n  },\n\n  toggleSelectionFontFamily (editorState, fontFamily, fontFamilyList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'FONTFAMILY-' + fontFamily, fontFamilyList.map(item => 'FONTFAMILY-' + item.name.toUpperCase()))\n  },\n\n  toggleSelectionLetterSpacing (editorState, letterSpacing, letterSpacingList = []) {\n    return this.toggleSelectionInlineStyle(editorState, 'LETTERSPACING-' + letterSpacing, letterSpacingList.map(item => 'LETTERSPACING-' + item))\n  },\n\n  toggleSelectionLink (editorState, href, target) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    let entityData = { href, target }\n\n    if (selectionState.isCollapsed() || this.getSelectionBlockType(editorState) === 'atomic') {\n      return editorState\n    }\n\n    if (href === false) {\n      return RichUtils.toggleLink(editorState, selectionState, null)\n    }\n\n    if (href === null) {\n      delete entityData.href\n    }\n\n    try {\n\n      const nextContentState = contentState.createEntity('LINK', 'MUTABLE', entityData)\n      const entityKey = nextContentState.getLastCreatedEntityKey()\n\n      let nextEditorState = EditorState.set(editorState, {\n        currentContent: nextContentState\n      })\n\n      nextEditorState = RichUtils.toggleLink(nextEditorState, selectionState, entityKey)\n      nextEditorState = EditorState.forceSelection(nextEditorState, selectionState.merge({\n        anchorOffset: selectionState.getEndOffset(), \n        focusOffset: selectionState.getEndOffset()\n      }))\n\n      nextEditorState = EditorState.push(nextEditorState, Modifier.insertText(\n        nextEditorState.getCurrentContent(), nextEditorState.getSelection(), ' '\n      ), 'insert-text')\n\n      return nextEditorState\n\n    } catch (error) {\n      console.warn(error)\n      return editorState\n    }\n\n  },\n\n  insertText (editorState, text, replace = true) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n    const currentSelectedBlockType = this.getSelectionBlockType(editorState)\n\n    if (currentSelectedBlockType === 'atomic') {\n      return editorState\n    }\n\n    if (!selectionState.isCollapsed()) {\n      return replace ? EditorState.push(editorState, Modifier.replaceText(\n        contentState, selectionState, text\n      ), 'replace-text') : editorState\n    } else {\n      return EditorState.push(editorState, Modifier.insertText(\n        contentState, selectionState, text\n      ), 'insert-text')\n    }\n\n  },\n\n  insertHTML (editorState, htmlString) {\n\n    if (!htmlString) {\n      return editorState\n    }\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    try {\n\n      const { blockMap } = convertFromRaw(convertHTMLToRaw(htmlString))\n\n      return EditorState.push(editorState, Modifier.replaceWithFragment(\n        contentState, selectionState, blockMap\n      ), 'insert-fragment')\n\n    } catch (error) {\n      console.warn(error)\n      return editorState\n    }\n\n  },\n\n  insertAtomicBlock (editorState, type, immutable = true, data = {}) {\n\n    const selectionState = editorState.getSelection()\n    const contentState = editorState.getCurrentContent()\n\n    if (!selectionState.isCollapsed() || this.getSelectionBlockType(editorState) === 'atomic') {\n      return editorState\n    }\n\n    const contentStateWithEntity = contentState.createEntity(type, immutable ? 'IMMUTABLE' : 'MUTABLE', data)\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n    const newEditorState = AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ')\n\n    return newEditorState\n\n  },\n\n  insertHorizontalLine (editorState) {\n    return this.insertAtomicBlock(editorState, 'HR')\n  },\n\n  insertMedias (editorState, medias = []) {\n\n    if (!medias.length) {\n      return editorState\n    }\n\n    if (this.getSelectionBlockType(editorState) === 'atomic') {\n      this.selectNextBlock(editorState, this.getSelectionBlock(editorState))\n    }\n\n    return medias.reduce((editorState, media) => {\n      const { url, name, type, meta } = media\n      const contentStateWithEntity = editorState.getCurrentContent().createEntity(type, 'IMMUTABLE', { url, name, type, meta })\n      const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n      return AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ')\n    }, editorState)\n\n  },\n\n  setMediaData (editorState, entityKey, data) {\n    return EditorState.push(editorState, editorState.getCurrentContent().mergeEntityData(entityKey, data), 'change-block-data')\n  },\n\n  removeMedia (editorState, mediaBlock) {\n    return this.removeBlock(editorState, mediaBlock)\n  },\n\n  setMediaPosition (editorState, mediaBlock, position) {\n\n    let newPosition = {}\n    const { float, alignment } = position\n\n    if (typeof float !== 'undefined') {\n      newPosition.float = mediaBlock.getData().get('float') === float ? null : float\n    }\n\n    if (typeof alignment !== 'undefined') {\n      newPosition.alignment = mediaBlock.getData().get('alignment') === alignment ? null : alignment\n    }\n\n    return this.setSelectionBlockData(this.selectBlock(editorState, mediaBlock), newPosition)\n\n  },\n\n  clear (editorState) {\n\n    const contentState = editorState.getCurrentContent()\n\n    const firstBlock = contentState.getFirstBlock()\n    const lastBlock = contentState.getLastBlock()\n\n    const allSelected = new SelectionState({\n      anchorKey: firstBlock.getKey(),\n      anchorOffset: 0,\n      focusKey: lastBlock.getKey(),\n      focusOffset: lastBlock.getLength(),\n      hasFocus: true\n    })\n\n    return EditorState.push(\n      editorState,\n      Modifier.removeRange(contentState, allSelected, 'backward'),\n      'remove-range'\n    )\n\n  },\n\n  handleKeyCommand (editorState, command) {\n    return RichUtils.handleKeyCommand(editorState, command)\n  },\n\n  handleNewLine (editorState, event) {\n    return handleNewLine(editorState, event)\n  },\n\n  undo (editorState) {\n    return EditorState.undo(editorState)\n  },\n\n  redo (editorState) {\n    return EditorState.redo(editorState)\n  }\n\n}"]}